//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Табличный объект сотрудников
//------------------------------------------------------------------------------

#include AtlProtocol.vih

Interface Person;

// Работник
Table struct mtPerson
(
  Id:     byte,
  Login:  s50,
  FIO:    s100,
  EMail:  s100,
  Passw:  s50,
  Sort:   byte,
  Born:   date,
  Info:   string,
  Addr:   string,
  Phone:  string
)
With index
(
  PersId  = Id (unique),
  ByLogin = Login,
  ByFIO   = FIO
);

Create view from mtPerson, mtPerson mtPerson2;

property Id:    byte absolute mtPerson.Id;
property Login: s50  absolute mtPerson.Login;
property FIO:   s100 absolute mtPerson.FIO;
property EMail: s100 absolute mtPerson.EMail;
property Passw: s50  absolute mtPerson.Passw;
property Sort:  byte absolute mtPerson.Sort;
property Born:  date absolute mtPerson.Born;
property Info:  string absolute mtPerson.Info;
property Addr:  string absolute mtPerson.Addr;
property Phone: string absolute mtPerson.Phone;
function GetYears: word; forward;
property Years: word read GetYears;
function GetAge: string; forward;
property Age:   string read GetAge;

index PersId  auto;
index ByLogin auto;
index ByFIO   auto;

private function GenerateNewId: byte;
{
  if (GetLast mtPerson2 ordered by index PersId <> tsOk)
    result := 1;
  else
    result := mtPerson2.Id + 1;
}

function IModify.doInsert: word;
{
  if (mtPerson.Id = 0)
    mtPerson.Id := GenerateNewId;

  result := insert current mtPerson;
  oWage.DataChanged := true;
}

function IModify.doUpdate: word;
{
  result := update current mtPerson;
  oWage.DataChanged := true;
}

function IModify.doDelete: word;
{
  result := delete current mtPerson;
  oWage.DataChanged := true;
}

implementation IModify.doFlush abstract;

constructor Init;
{
  result := true;
  delete all mtPerson;
}

function GetYears: word;
{
  result := 0;
  if (mtPerson.Born <> ZeroDate)
    result := Year(Sub_Date(Cur_Date, mtPerson.Born))-1;
}

function GetAge: string;
{
  result := '';
  if (mtPerson.Born <> ZeroDate)
  {
    var tmp: date;
    tmp := Sub_Date(Cur_Date, mtPerson.Born);
    var y, yr, m: byte;
    y := Year(tmp)-1;
    m := Month(tmp);
    yr := y mod 10;
    result := string(y) + ' ' + case(yr; 1: 'год', 2..4: 'года'; 'лет') +
              if(m = 0, '', ' ' + string(m) + ' месяц' + case(m; 1: '', 2..4: 'а'; 'ев'));
  }
}

public procedure Clear(_wage: IWageView = NullRef);
{
  oWage := _wage;
  delete all mtPerson;
}

public function LoadXml(_e: IDomNode): boolean;
{
  ClearBuffer(#mtPerson);
  if _e.GetFirstAttr
    do
    {
      case _e.FndAttr.Name of
        'rok:Login':  Login  := _e.FndAttr.Value;
        'rok:FIO':    FIO    := Replace(_e.FndAttr.Value, '_', '');
        'rok:EMail':  EMail  := _e.FndAttr.Value;
        'rok:Passw':  Passw  := _e.FndAttr.Value;
        'rok:Sort':   Sort   := byte(_e.FndAttr.Value);
        'rok:Born':   Born   := StrToDate(_e.FndAttr.Value, 'DD/MM/YYYY');
        'rok:Info':   Info   := _e.FndAttr.Value;
        'rok:Addr':   Addr   := _e.FndAttr.Value;
        'rok:Phone':  Phone  := _e.FndAttr.Value;
      end;
    }
    while (_e.GetNextAttr);

  if (GetFirst mtPerson2 where (( mtPerson.FIO == mtPerson2.FIO )) = tsOk)
    Id := mtPerson2.Id;
  else
  {
    Id := GenerateNewId;
    insert current mtPerson;
    oWage.Log(APE_WARNING, 'Добавлен сотрудник ' + string(Id) + ' ' + mtPerson.FIO);
    oWage.DataChanged := true;
  }

  result := true;
}

public function SaveXml(_e: IDomNode): IDomNode;
{
  var xnode: IDomNode
  xnode := _e.AddNode('rok:Person');
  xnode.AddAttr('rok:Login=' + Login);
  xnode.AddAttr('rok:FIO='   + FIO);
  xnode.AddAttr('rok:EMail=' + EMail);
  xnode.AddAttr('rok:Passw=' + Passw);
  xnode.AddAttr('rok:Sort='  + Sort);
  xnode.AddAttr('rok:Born='  + string(Born));
  xnode.AddAttr('rok:Info='  + Info);
  xnode.AddAttr('rok:Addr='  + Addr);
  xnode.AddAttr('rok:Phone=' + Phone);
  result := xnode;
}

public function SaveRok: boolean;
{
  result := true;
  StartNewRec;
  WriteByte(Id);
  WriteStr(Login);
  WriteStr(FIO);
  WriteStr(EMail);
  WriteStr(Passw);
  WriteByte(Sort);
  WriteDate(Born);
  WriteStr(Info);
  WriteStr(Addr);
  WriteStr(Phone);
}

public function LoadRok: boolean;
{
  result := false;

  if CheckNewRec
  {
    ClearBuffer(#mtPerson);
    Id    := ReadByte;
    Login := ReadStr;
    FIO   := ReadStr;
    EMail := ReadStr;
    Passw := ReadStr;
    Sort  := ReadByte;
    Born  := ReadDate;
    Info  := ReadStr;
    Addr  := ReadStr;
    Phone := ReadStr;
    if (GetFirst mtPerson2 where (( mtPerson.Id == mtPerson2.Id )) <> tsOk)
    {
      insert current mtPerson;
      //oWage.Log(APE_INFO, string(mtPerson.Id) + '. ' + mtPerson.FIO);
    }
    result := true;
  }
}

end.
