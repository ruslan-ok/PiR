//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Реализация кодера ZBase32
//------------------------------------------------------------------------------

#include ZBase32.vih

Interface ZBase32;

Const
  EncodingTable32: string = 'ybndrfg8ejkmcpqxot1uwisza345h769';
End;

var i, cc, step, ndx: byte;

private procedure EncodeOne32(var _res: string);
{
  case step of

    0:
    {
      ndx := ((cc shr 3) and 1Fh);
      _res += EncodingTable32[ndx+1];
      ndx := ((cc shl 2) and 1Ch);
      step := 1;
    }

    1:
    {
      ndx := ndx or ((cc shr 6) and 03h);
      _res += EncodingTable32[ndx+1];
      ndx := ((cc shr 1) and 1Fh);
      _res += EncodingTable32[ndx+1];
      ndx := ((cc shl 4) and 10h);
      step := 2;
    }

    2:
    {
      ndx := ndx or ((cc shr 4) and 0Fh);
      _res += EncodingTable32[ndx+1];
      ndx := ((cc shl 1) and 1Eh)
      step := 3;
    }

    3:
    {
      ndx := ndx or ((cc shr 7) and 01h);
      _res += EncodingTable32[ndx+1];
      ndx := ((cc shr 2) and 1Fh);
      _res += EncodingTable32[ndx+1];
      ndx := ((cc shl 3) and 18h);
      step := 4;
    }

    4:
    {
      ndx := ndx or ((cc shr 5) and 07h);
      _res += EncodingTable32[ndx+1];
      ndx := (cc and 1Fh);
      _res += EncodingTable32[ndx+1];
      step := 0;
    }

  end;
}

public function Encode(_data: string): string;
{
  result := '';
  step := 0;

  for (i := 1; i <= length(_data); i++)
  {
    cc := ord(_data[i]);
    EncodeOne32(result);
  }

  if (step <> 0)
  {
    cc := 0;
    EncodeOne32(result);
  }
}

private function GetPos32(_value: char): byte;
{
  result := 0;
  var k: byte;
  for (k := 1; k <= length(EncodingTable32); k++)
  {
    if (EncodingTable32[k] = _value)
    {
      result := k-1;
      exit;
    }
  }
  message('oops');
}

public function Decode(_data: string): string;
{
  result := '';
  step := 0;

  for (i := 1; i <= length(_data); i++)
  {
    cc := GetPos32(_data[i]);

    case step of

      0:
      {
        ndx := ((cc shl 3) and 0F8h);
        step := 1;
      }

      1:
      {
        ndx := ndx or ((cc shr 2) and 07h);
        result += chr(ndx);
        ndx := ((cc shl 6) and 0C0h);
        step := 2;
      }

      2:
      {
        ndx := ndx or ((cc shl 1) and 3Eh);
        step := 3;
      }

      3:
      {
        ndx := ndx or ((cc shr 4) and 01h);
        result += chr(ndx);
        ndx := ((cc shl 4) and 0F0h);
        step := 4;
      }

      4:
      {
        ndx := ndx or ((cc shr 1) and 0Fh);
        result += chr(ndx);
        ndx := ((cc shl 7) and 080h);
        step := 5;
      }

      5:
      {
        ndx := ndx or ((cc shl 2) and 7Ch);
        step := 6;
      }

      6:
      {
        ndx := ndx or ((cc shr 3) and 03h);
        result += chr(ndx);
        ndx := ((cc shl 5) and 0E0h);
        step := 7;
      }

      7:
      {
        ndx := ndx or (cc and 1Fh);
        result += chr(ndx);
        step := 0;
      }

    end;
  }
}

End.
