//---------------------------------------------------------------------------------
//                                                      (c) корпорация Галактика
// Галактика ERP 9.1 - Общего назначения
// Обёртка для функций обработки XML-DOMDocument из Pascal\G_ExpImp\XMLDOMFunc.pas
// Более читабельный код формирования xml-документа, автоматизированное освобождение памяти
//---------------------------------------------------------------------------------

#define TPtr longint

function XMLDOMNode_get_NodeName               (#TPtr)                   : string;  external 'G_ExpImp.dll';
function XMLDOMNamedNodeMap_get_Item           (#TPtr, longint)          : #TPtr; external 'G_ExpImp.dll';
function XMLDOMNode_Release                    (NodeHandle: #TPtr)       : boolean; external 'G_ExpImp.dll';
function XMLDOMAttribute_get_NodeValue         (#TPtr)                   : string;  external 'G_ExpImp.dll';
function XMLDOMDoc_CreateElement               (#TPtr, string)           : #TPtr; external 'G_ExpImp.dll';
function XMLDOMNode_AppendChild                (#TPtr, #TPtr)            : #TPtr; external 'G_ExpImp.dll';
function XMLDOMElement_SetAttribute            (#TPtr, string, string)   : boolean; external 'G_ExpImp.dll';
function XMLDOMDoc_CreateTextNode              (#TPtr, string)           : #TPtr; external 'G_ExpImp.dll';
function XMLDOMNode_get_ChildNodes             (#TPtr)                   : longint; external 'G_ExpImp.dll';
function XMLDOMNodeList_get_Length             (#TPtr)                   : longint; external 'G_ExpImp.dll';
function XMLDOMNodeList_get_Item               (#TPtr, longint)          : #TPtr; external 'G_ExpImp.dll';
function XMLDOMNode_get_Attributes             (#TPtr)                   : #TPtr; external 'G_ExpImp.dll';
function XMLDOMNamedNodeMap_get_Length         (#TPtr)                   : longint; external 'G_ExpImp.dll';
function XMLDOMDoc_DocumentElement             (#TPtr)                   : #TPtr; external 'G_ExpImp.dll';
function XMLDOMDoc_New                                                   : #TPtr; external 'G_ExpImp.dll';
function XMLDOMDoc_CreateProcessingInstruction (#TPtr, string, string)   : #TPtr; external 'G_ExpImp.dll';
function XMLDOMDoc_Load                        (#TPtr, string)           : boolean; external 'G_ExpImp.dll';
function XMLDOMDoc_Save                        (#TPtr, string)           : boolean; external 'G_ExpImp.dll';

//---------------------------------------------------------------------------------
Interface DomNode;

var
  _doc: IDomDoc;
  _NodeId: TPtr;

  subList, attrList: TPtr;
  subNode: IDomNode noAuto; // Текущий подчиненный узел
  subQnt: longint; // Количество подчиненных узлов
  subCur: longint; // Номер текущего подчиненного узла
  attrQnt: longint; // Количество атрибутов узла
  attrCur: longint; // Номер текущего атрибута узла

// Общий для всех узлов интерфейс документа
property doc: IDomDoc read _doc write _doc := result;

// Адрес указателя на XMLDOMNode
property id: TPtr read _NodeId write _NodeId := result;

// Имя узла
property IDomNode.Name: string read XMLDOMNode_get_NodeName(_NodeId);

// Название атрибута
private function GetAttrName: string;
{
  result := '';
  if (attrList <> 0) and (attrCur >= 0) and (attrCur < attrQnt)
  {
    var a: TPtr;
    a := XMLDOMNamedNodeMap_get_Item(attrList, attrCur);
    result := XMLDOMNode_get_NodeName(a);
    XMLDOMNode_Release(a);
  }
}

// Значение атрибута
private function GetAttrValue: string;
{
  result := '';
  if (attrList <> 0) and (attrCur >= 0) and (attrCur < attrQnt)
  {
    var a: TPtr;
    a := XMLDOMNamedNodeMap_get_Item(attrList, attrCur);
    result := XMLDOMAttribute_get_NodeValue(a);
    XMLDOMNode_Release(a);
  }
}

// Имя атрибута
property IDomNodeAttr.Name: string read GetAttrName;

// Значение атрибута
property IDomNodeAttr.Value: string read GetAttrValue;

// Создание объекта "Узел"
private function GetNode(_id: TPtr): IDomNode;
{
  result := IDomNode(new(DomNode)); // Новый узел
  result.doc := _doc; // Документ у всех узлов общий
  result.id := _id;
}

// Очередной подчиненный узел
property FndNode: IDomNode read subNode;

// Очередной подчиненный узел
property FndAttr: IDomNodeAttr read IDomNodeAttr(self);

constructor Init;
{
  _NodeId := 0;
  subQnt := subCur := attrQnt := attrCur := 0;
  subNode := NullRef;
  attrList := 0;
  result := true;
}

destructor Done;
{
  FreeVipInterface(subNode);
  _doc := NullRef;
  if (_NodeId <> 0)
    XmlDomNode_Release(_NodeId);
}

// Добавляет новый узел к текущему узлу
public function AddNode(_name: string; _xmlns: string = ''): IDomNode;
{
  result := IDomNode(new(DomNode)); // Новый узел
  result.doc := _doc; // Документ у всех узлов общий

  if (_xmlns <> '') or (Pos(':', _name) > 1)
  {
    var sNS: string = '';
    if (Pos(':', _name) > 1)
      sNS := SubStr(_name, 1, Pos(':', _name)-1);
    _doc.SetNS(sNS, _xmlns);
  }

  result.id := XmlDomDoc_CreateElement(_doc.id, _name);
//  result.id := XMLDOMNodeAsElement(XMLDOMDoc_CreateNode(_doc.id, 1 /*NODE_ELEMENT*/, _name, _doc.ns));
  XmlDomNode_Release(XmlDomNode_AppendChild(_NodeId, result.id));
}

// Добавляет атрибут текущему узлу
public procedure AddAttr(_attr: string);
{
  if (Pos('=', _attr) > 1)
  {
    var a, s: string;
    a := SubStr(_attr, 1, Pos('=', _attr)-1);
    s := SubStr(_attr, Pos('=', _attr)+1, 255);
    if (length(s) > 2) and (s[1] = '"') and (s[length(s)] = '"')
      s := SubStr(s, 2, length(s)-2);
    if (Pos('XMLNS:', UpCase(a)) = 1)
      _doc.SetNS(SubStr(a, Pos(':', a) + 1, 255), s);
    if (s <> '0.00') and (s <> '') and (s <> '0') and (s <> string(comp(0),0,0)) and (s <> string(ZeroDate))
      XmlDomElement_SetAttribute(_NodeId, a, s);
  }
}

// Добавляет к текущему узлу новый узел с текстовым содержимым
public function AddTextNode(_name, _value: string): IDomNode;
{
  result := AddNode(_name);
  var hText: TPtr;
  hText := XmlDomDoc_CreateTextNode(_doc.id, _value);
  XmlDomNode_Release(XmlDomNode_AppendChild(result.id, hText));
  XmlDomNode_Release(hText);
}

// Позиционирование на первый подчиненный узел
public function GetFirstNode: boolean;
{
  result := false;

  subList := XMLDOMNode_get_ChildNodes(id);
  subQnt := XMLDOMNodeList_get_Length(subList);

  if (subQnt > 0)
  {
    subCur := 0;
    var n: TPtr;
    n := XMLDOMNodeList_get_Item(subList, subCur);
    FreeVipInterface(subNode);
    subNode := GetNode(n);
    result := true;
  }
}

// Позиционирование на следующий подчиненный узел
public function GetNextNode: boolean;
{
  result := false;

  if (subCur < (subQnt-1))
  {
    subCur++;
    var n: TPtr;
    n := XMLDOMNodeList_get_Item(subList, subCur);
    FreeVipInterface(subNode);
    subNode := GetNode(n);
    result := true;
  }
}

// Позиционирование на первый атрибут узла
public function GetFirstAttr: boolean;
{
  result := false;

  attrList := XMLDOMNode_get_Attributes(id);
  attrQnt := XMLDOMNamedNodeMap_get_Length(attrList);

  if (attrQnt > 0)
    result := true;
}

// Позиционирование на следующий атрибут узла
public function GetNextAttr: boolean;
{
  result := false;

  if (attrQnt > 0) and (attrCur < (attrQnt-1))
  {
    attrCur++;
    result := true;
  }
}

end.

//---------------------------------------------------------------------------------
Interface DomDoc;

Table struct mtNS
(
  Name: s100,
  Value: string
)
with index
(
  byName = Name (unique)
);

Create view as select * from mtNS;

var
  docRoot: IDomNode; // Корневой узел документа
  _curNS: string;

// Текущее пространство имен
property ns: string read _curNS write _curNS := result;

// Корневой элемент документа
private function GetRoot: IDomNode;
{
  if (not NullVipRef(docRoot))
    result := docRoot;
  else
  {
    result := NullRef;

    if (not NullVipRef(_doc))
    {
      var r: TPtr;
      r := XMLDOMDoc_DocumentElement(_doc.id);
      docRoot := GetNode(r);
      result := docRoot;
    }
  }
}

// Корневой узел документа
property RootNode: IDomNode read GetRoot;

constructor Init;
{
  inherited::Init;
  docRoot := NullRef;
  _curNS := '';
  result := true;
}

destructor Done;
{
  inherited::Done;
}

// Освобождение ссылок перед уничтожением документа
public procedure Free;
{
  FreeVipInterface(docRoot);
  FreeVipInterface(_doc);
}

// Инициализация документа
public procedure CreateEmpty;
{
  _doc := IDomDoc(self);
  _NodeId := XmlDomDoc_New;
}

// Инициализация нового xml-документа с добавлением стандартной инструкции обработки
public procedure CreateXmlDoc;
{
  CreateEmpty;
  var hProc: TPtr;
  hProc := XmlDomDoc_CreateProcessingInstruction(_NodeId, 'xml', 'version="1.0" encoding="utf-8"');
  XmlDomNode_Release(XmlDomNode_AppendChild(_NodeId, hProc));
  XmlDomNode_Release(hProc);
}

// Загружает документ из файла
public function Load(_file: string): boolean;
{
  if (_NodeId <> 0)
    XmlDomNode_Release(_NodeId);

  CreateEmpty;
  result := false;
  if ExistFile(_file)
    result := XMLDOMDoc_Load(_doc.id, _file);
  else
  {
    var hBody: TPtr;
    hBody := XmlDomDoc_CreateElement(_doc.id, 'body');
    XmlDomNode_Release(XmlDomNode_AppendChild(_NodeId, hBody));
  }
}

// Сохраняет документ в файл
public function Save(_file: string): boolean;
{
  result := XMLDOMDoc_Save(_doc.id, _file);
}

public procedure SetNS(_ns, _value: string);
{
  if (GetFirst mtNS where (( _ns == mtNS.Name )) = tsOk)
    _doc.ns := mtNS.Value;
  else
    if (_value <> '')
    {
      ClearBuffer(#mtNS);
      mtNS.Name := _ns;
      mtNS.Value := _value;
      insert current mtNS;
      _doc.ns := _value;
    }
}

end.
