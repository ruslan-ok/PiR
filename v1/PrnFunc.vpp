
Const
  R01 = 01; // Оклад
  R02 = 02; // Премия отдела
  R03 = 03; // Премия Управления
  R04 = 04; // Проектный бизнес
  R05 = 05; // Компенсация разницы курсов
  R06 = 06; // Выплата отложенной части
  R07 = 08; // Начислено
  R21 = 07; // Льгота по подоходному налогу
  R08 = 09; // Зачет с прошлого месяца
  R09 = 10; // К выдаче
  R10 = 11; // Аванс
  R11 = 12; // Межрасчетные выплаты
  R12 = 13; // К доплате
  R13 = 14; // Перечислено
  R14 = 15; // 2 часть
  R16 = 16; // Выдано
  R15 = 17; // Зачет на следующий месяц
  R17 = 18; // Долг за расчетный месяц
  R20 = 19; // Долг за предыдущие месяцы
  R18 = 20; // Выплата отложенной части
  R19 = 21; // Долг

  MaxRows = 21;
end;

function GetParamName(_row: byte): string;
{
  result := '';

  case _row of
    R01: result := 'Повременная оплата (оклад)';
    R02: result := 'Премия отдела';
    R03: result := 'Премия Управления';
    R04: result := if(CurPeriod = 201610, 'Выплата отложенной части', 'Проектный бизнес');
    R05: result := 'Компенсация разницы курсов';
    R06: result := 'Выплата отложенной части';
    R21: result := 'Льгота по подоходному налогу';
    R07: result := 'Начислено';
    R08: result := 'Зачет с прошлого месяца';
    R09: result := 'К выдаче';
    R10: result := 'Аванс';
    R11: result := 'Межрасчетные выплаты (отпускные)';
    R12: result := 'К доплате';
    R13: result := 'Перечислено';
    R14: result := '2 часть';
    R16: result := 'Выдано';
    R15: result := 'Зачет на следующий месяц';
    R17: result := 'Долг за расчетный месяц';
    R20: result := 'Долг за предыдущие месяцы';
    R18: result := 'Выплата отложенной части';
    R19: result := 'Долг';
  end;
}


function IsVisible(_row, _col: byte): boolean;
{
  deb.u('IsVisible(_row = ' + string(_row) + ', _col = ' + string(_col) + ')');
  var s: array[1..50] of string;

  if (wDebug = 1)
  { // Отладочный вариант
    s[R01] := '1    '; // Оклад
    s[R02] := '1    '; // Премия отдела
    s[R03] := '1    '; // Премия Управления
    s[R04] := '1    '; // Проектный бизнес
    s[R05] := '1    '; // Компенсация разницы курс
    s[R06] := '1    '; // Выплата отложенной части
    s[R21] := '1 1 1'; // Льгота по подоходному налогу
    s[R07] := '1    '; // Начислено
    s[R08] := '1 1 1'; // Зачет с прошлого месяца
    s[R09] := '1    '; // К выдаче
    s[R10] := '1 1 1'; // Аванс
    s[R11] := '1 1 1'; // Межрасчетные выплаты (отпускные)
    s[R12] := '1 1 1'; // К доплате
    s[R13] := '1 1 1'; // Перечислено
    s[R14] := '1 1 1'; // 2 часть
    s[R16] := '1   1'; // Выдано
    s[R15] := '1   1'; // Зачет на следующий месяц
    s[R17] := '1   1'; // Долг за расчетный месяц
    s[R20] := '1    '; // Долг за предыдущие месяцы
    s[R18] := '     '; // Выплата отложенной части
    s[R19] := '1   1'; // Долг
  }
  else
  {
    s[R01] := '1    '; // Оклад
    s[R02] := '1    '; // Премия отдела
    s[R03] := '1    '; // Премия Управления
    s[R04] := '1    '; // Проектный бизнес
    s[R05] := '1    '; // Компенсация разницы курс
    s[R06] := '1    '; // Выплата отложенной части
    s[R21] := '1 1 1'; // Льгота по подоходному налогу
    s[R07] := '1    '; // Начислено
    s[R08] := '1 1 1'; // Зачет с прошлого месяца
    s[R09] := '1    '; // К выдаче
    s[R10] := '1 1 1'; // Аванс
    s[R11] := '1 1 1'; // Межрасчетные выплаты (отпускные)
    s[R12] := '     '; // К доплате
    s[R13] := '1 1 1'; // Перечислено
    s[R14] := '1 1 1'; // 2 часть
    s[R16] := '1   1'; // Выдано
    s[R15] := '1 1 1'; // Зачет на следующий месяц
    s[R17] := '     '; // Долг за расчетный месяц
    s[R20] := '     '; // Долг за предыдущие месяцы
    s[R18] := '     '; // Выплата отложенной части
    s[R19] := '     '; // Долг
  }
  result := false;

  if (_row < 1) or (_row > 50)
  {
    message('IsVisible(_row = ' + string(_row) + ', _col = ' + string(_col) +
                           ') _row not valid');
    exit;
  }
  case _col of
    2: if (length(s[_row]) < 1)
         deb.w('IsVisible(_row = ' + string(_row) + ', _col = ' + string(_col) +
                           ') length(s[_row]) = ' + string(length(s[_row])));
       else
         result := (s[_row][1] = '1');
    3: if (length(s[_row]) < 3)
         deb.w('IsVisible(_row = ' + string(_row) + ', _col = ' + string(_col) +
                           ') length(s[_row]) = ' + string(length(s[_row])));
       else
         result := (s[_row][3] = '1');
    4: if (length(s[_row]) < 5)
         deb.w('IsVisible(_row = ' + string(_row) + ', _col = ' + string(_col) +
                           ') length(s[_row]) = ' + string(length(s[_row])));
       else
         result := (s[_row][5] = '1');
  end;
  deb.rb(result);
}

function Rate(_row: byte): double; forward;
function RB(_row: byte): double; forward;

// Счастливчики - им считают по реальному курсу
function isLuckie: boolean;
{
  if (CurPeriod >= 201705) and (mtStruct.Mode = 2)
  {
    result := true;
    exit;
  }

  result := false;
  if (CurPeriod >= 201601)
    if (mtStruct.Mode = 2)
      if (mtStruct.Rec = 000000000000000Ah) or (mtStruct.Rec = 0066000000000002h) or (mtStruct.Rec = 0000000000000019h)
        result := true;
}

// Зачет с прошлого месяца в валюте. Если есть запись за предыдущий месяц, берем из неё
function GetIncomingUE: double;
{
  result := 0;

  if (mtMoney.LadderFromLastUE <> 0)
  {
    result := mtMoney.LadderFromLastUE;
    exit;
  }

  if (mtMoney.LadderFromLastRB <> 0)
  {
    if (GetFirst mtPeriodPrev = tsOk)
      result := Round(mtMoney.LadderFromLastRB / mtPeriodPrev.SecPartExch, 2);
    else
      result := Round(mtMoney.LadderFromLastRB / mtPeriod.SecPartExch, 2);
    exit;
  }

  if (GetFirst mtMoneyPrev = tsOk)
  {
    /*if (mtMoneyPrev.LadderToNextUE <> 0)
      result := mtMoneyPrev.LadderToNextUE;
    else*/
      if (GetFirst mtPeriodPrev = tsOk)
        result := Round(mtMoneyPrev.LadderToNextRB / mtPeriodPrev.SecPartExch, 2);
      else
        result := Round(mtMoneyPrev.LadderToNextRB / mtPeriod.SecPartExch, 2);
  }
}

// Курс зачета с прошлого месяца. Если есть запись за предыдущий месяц, берем курс выплаты в прошлом месяце
function GetIncomingRate: double;
{
  if (GetFirst mtPeriodPrev = tsOk)
    result := mtPeriodPrev.SecPartExch;
  else
    result := mtPeriod.SecPartExch;
}

function UE(_row: byte): double;
{
  deb.u('UE(_row = ' + string(_row) + ')');

  result := 0;

  case _row of
    R01: result := mtMoney.SalaryUE / mtMoney.DaysPlan * mtMoney.DaysFact; // Оклад
    R02: result := if(mtMoney.DepBonusUE <> 0, mtMoney.DepBonusUE, Round(RB(_row) / Rate(_row), 2)); // Премия отдела
    R03: result := if(mtMoney.GovBonusUE <> 0, mtMoney.GovBonusUE, Round(RB(_row) / Rate(_row), 2)); // Премия Управления
    R04: result := if(mtMoney.PrBisnesUE <> 0, mtMoney.PrBisnesUE, Round(RB(_row) / Rate(_row), 2)); // Проектный бизнес
    R05: result := mtMoney.CompensUE; // Компенсация разницы курсов
    R06: result := mtMoney.VyplOtlozhUE; // Выплата отложенной части
    R21: result := Round(RB(_row) / Rate(_row), 2); // Льгота по подоходному налогу
    R07: result := UE(R01) + UE(R02) + UE(R03) + UE(R04) + UE(R05) + UE(R06); // Начислено

    // Зачет с прошлого месяца
    // Если есть запись за предыдущий месяц, берем из неё


    // Зачет с прошлого месяца - в распечатке будет в рублях, поэтому в валюте считаем от этой суммы по курсу выплаты в прошлом месяце
    R08: result := GetIncomingUE; // mtMoney.LadderFromLastRB / if(isValid(#mtPeriodPrev), mtPeriodPrev.SecPartExch, mtPeriod.SecPartExch);
    R09: result := UE(R07) + UE(R08) + UE(R21); // К выдаче
    R10: result := Round(RB(_row) / Rate(_row), 2); // Аванс
    R11: result := Round(RB(_row) / Rate(_row), 2); // Межрасчетные выплаты (отпускные)
    R12: result := 0; // К доплате
    R13: result := Round(RB(_row) / Rate(_row), 2); // Перечислено
    R14: result := Round(RB(_row) / Rate(_row), 2); // 2 часть
    R16: result := UE(R10) + UE(R11) + UE(R13) + UE(R14); // Выдано
    R15: result := if(Abs(RB(_row)) < Rate(_row), 0, Round(RB(_row) / Rate(_row), 2)); // Зачет на следующий месяц
    R17: result := UE(R09) - UE(R16); // Долг за расчетный месяц
    R20: result := 0; // Долг за предыдущие месяцы
    R18: result := mtMoney.VyplOtlozhUE; // Выплата отложенной части
    R19: result := 0; // Долг
  end;
  deb.r(string(result));
}

function Rate(_row: byte): double;
{
  deb.u('Rate(_row = ' + string(_row) + ')');
  result := 0;

  case _row of
    R01: result := if(isLuckie, mtPeriod.SecPartExch, mtPeriod.OkladExch); // Оклад
    R02: result := if(RB(_row) = 0, 0, mtPeriod.OkladExch); // Премия отдела
    R03: result := if(RB(_row) = 0, 0, if(CurPeriod < 201509 or CurPeriod > 201606, mtPeriod.SecPartExch, mtPeriod.ThirdPartExch)); // Премия Управления
    R04: result := if(RB(_row) = 0, 0, if(CurPeriod < 201509 or CurPeriod > 201606, mtPeriod.SecPartExch, mtPeriod.ThirdPartExch)); // Проектный бизнес
    R05: result := if(UE(_row) = 0 and RB(_row) = 0, 0, mtPeriod.SecPartExch); // Компенсация разницы курсов
    R06: result := if(RB(_row) = 0, 0, if(CurPeriod < 201509 or CurPeriod > 201606, mtPeriod.SecPartExch, mtPeriod.ThirdPartExch)); // Выплата отложенной части
    R21: result := mtPeriod.OkladExch; // Льгота по подоходному налогу
    R07: result := mtPeriod.SecPartExch; // Начислено
    R08: result := GetIncomingRate; // Зачет с прошлого месяца
    R09: result := mtPeriod.SecPartExch; // К выдаче
    R10: result := mtPeriod.PrepayExch; // Аванс
    R11: result := if(RB(_row) = 0, 0, if(mtMoney.PaymBetwinExch <> 0, mtMoney.PaymBetwinExch, mtPeriod.PrepayExch));  // Межрасчетные выплаты (отпускные)
    R12: result := mtPeriod.SecPartExch; // К доплате
    R13: result := mtPeriod.SecPartExch; // Перечислено
    R14: result := mtPeriod.ThirdPartExch; // 2 часть
    R16: result := 0; // Выдано
    R15: result := Rate(R13); //if(Abs(RB(_row)) < mtPeriod.SecPartExch, 0, mtPeriod.SecPartExch); // Зачет на следующий месяц
    R17: result := 0; // Долг за расчетный месяц
    R20: result := 0; // Долг за предыдущие месяцы
    R18: result := 0; // Выплата отложенной части
    R19: result := 0; // Долг
  end;
  deb.r(string(result));
}

// Льгота по подоходному налогу
// С 1 января 2017 года размеры стандартных налоговых вычетов составляют:
// 93 бел.руб. в месяц - для граждан с низким налогооблагаемым доходом (меньше 563 бел.руб. в месяц);
// 27 бел.руб. в месяц - на ребенка до 18 лет и (или) каждого иждивенца (на находящуюся в декрете жену, на обучающихся детей старше 18 лет);
// 52 бел.руб. в месяц - на двоих и больше детей до 18 лет;
// 52 бел.руб. в месяц - на ребенка до 18 лет и (или) каждого иждивенца для одиноких родителей, приемных родителей, опекунов и попечителей;
// 131 бел.руб. в месяц - для отдельных категорий граждан.
function GetTaxDeduct: double;
{
  var tdKol: double;

  if (mtMoney.TaxDeductKol = 0)
    tdKol := mtStaff.TaxDeduct;
  else
    tdKol := mtMoney.TaxDeductKol;

  if (tdKol = 0)
  {
    result := 0;
    exit;
  }

  var fTaxDeduct: double;

  if (CurPeriod < 201701)
    if (tdKol = 1)
      fTaxDeduct := 24;
    else
      fTaxDeduct := 46;
  else
    if (tdKol = 1)
      fTaxDeduct := 27;
    else
      fTaxDeduct := 52;

  result := Round(fTaxDeduct * mtStaff.TaxDeduct * 0.09, 2); // 2.43, 9.36, 14.04, 18.72
}
// Льгота по подоходному налогу
/*
function GetTaxDeduct: double;
{
  if (CurPeriod < 201701) and (mtStaff.TaxDeduct = 2)
  // На 1 ребенка 24 руб, на двух - 46 руб, если больше, то считаем кратным 24-м (mtPeriod.TaxDeduct)
    result := 46;
  else
    result := mtPeriod.TaxDeduct;

  result := Round(mtStaff.TaxDeduct * result * 0.09, 2);
}
*/

function RB(_row: byte): double;
{
  deb.u('RB(_row = ' + string(_row) + ')');
  result := 0;

  case _row of
    R01: result := UE(_row) * Rate(_row); // Оклад
    R02: result := if(mtMoney.DepBonusUE <> 0, mtMoney.DepBonusUE * mtPeriod.OkladExch, mtMoney.DepBonusRB * 0.91); // Премия отдела
    R03: result := Round(mtMoney.GovBonusRB * 0.91, 2); // Премия Управления
    R04: result := Round(mtMoney.PrBisnesRB * 0.91, 2); // Проектный бизнес
    R05: result := mtMoney.CompensRB; // Компенсация разницы курсов
    //R06: result := Round(if(mtMoney.VyplOtlozhRB <> 0, mtMoney.VyplOtlozhRB, UE(R06) * mtPeriod.SecPartExch) * if(CurPeriod > 201510, 0.91, 1), 2); // Выплата отложенной части
    R06: result := Round(mtMoney.VyplOtlozhRB * 0.91, 2); // Выплата отложенной части
    R21: result := GetTaxDeduct; //Round(mtStaff.TaxDeduct * mtPeriod.TaxDeduct * 0.09, 2); // Льгота по подоходному налогу
    R07: result := RB(R01) + RB(R02) + RB(R03) + RB(R04) + RB(R05) + RB(R06); // Начислено
    R08: result := if(Abs(mtMoney.LadderFromLastRB) < 0.01, 0, mtMoney.LadderFromLastRB); // Зачет с прошлого месяца
    R09: result := RB(R07) + RB(R08)+ RB(R21); // К выдаче
    R10: result := mtMoney.PrepaymentRB; // Аванс
    R11: result := mtMoney.PaymBetwinRB; // Межрасчетные выплаты (отпускные)
    R12: result := 0; // К доплате
    R13: result := mtMoney.TransferedRB; // Перечислено
    R14: result := mtMoney.Transfered2RB; // 2 часть
    R16: result := RB(R10) + RB(R11) + RB(R13) + RB(R14); // Выдано
    R15: result := if(Abs(mtMoney.LadderToNextRB) < 0.01, 0, mtMoney.LadderToNextRB); // Зачет на следующий месяц
    R17: result := RB(R09) - RB(R16); // Долг за расчетный месяц
    R20: result := 0; // Долг за предыдущие месяцы
    R18: result := 0; // Выплата отложенной части
    R19: result := 0; // Долг
  end;
  deb.r(string(result));
}

function GetComment(_row: byte): string;
{
  result := '';

  case _row of
    R01: result := ''; // Оклад
    R02: result := mtMoney.DepBonusComment; // Премия отдела
    R03: result := mtMoney.GovBonusComment; // Премия Управления
    R04: result := mtMoney.PrBisnesComment; // Проектный бизнес
    R05: result := ''; // Компенсация разницы курсов
    R06: result := ''; // Выплата отложенной части
    R21: result := ''; // Льгота по подоходному налогу
    R07: result := ''; // Начислено
    R08: result := ''; // Зачет с прошлого месяца
    R09: result := ''; // К выдаче
    R10: result := 'перечисление ' + DateToStr(mtPeriod.Prepayment, 'DD.MM.YYYY'); // Аванс
    R11: result := ''; // Межрасчетные выплаты (отпускные)
    R12: result := ''; // К доплате
    R13: result := 'перечисление ' + DateToStr(mtPeriod.SecPart, 'DD.MM.YYYY'); // Перечислено
    R14: result := 'перечисление ' + DateToStr(mtPeriod.ThirdPart, 'DD.MM.YYYY'); // 2 часть
    R16: result := ''; // Выдано
    R15: result := ''; // Зачет на следующий месяц
    R17: result := ''; // Долг за расчетный месяц
    R20: result := ''; // Долг за предыдущие месяцы
    R18: result := ''; // Выплата отложенной части
    R19: result := ''; // Долг
  end;
}

// -------------------------------------------

function NeedPrint(_row: byte): boolean;
{
  deb.u('NeedPrint(_row = ' + string(_row) + ')');
  result := (IsVisible(_row, 2) and (UE(_row) <> 0)) or (IsVisible(_row, 4) and (RB(_row) <> 0));
  if (result and (wDebug = 0) and (Abs(RB(_row)) = 0.01) and ((_row = R08) or (_row = R15)))
    result := false; // В режиме без отладки не показываем копеешные зачеты с прошлого и на следующий месяц
  deb.rb(result);
}

function PrintFormatted(_row, _col: byte): string;
{
  result := '';

  if IsVisible(_row, _col)
  {
    var value: double;
    value := 0;
    case _col of
      2: value := UE(_row);
      3: value := Rate(_row);
      4: value := RB(_row);
    end;

    var format: string;
    format := '[|-]366 666 666 666';
    case _col of
      2: format := '\2p[|-]366 666 666 666.88';
      3: format := '\4p[|-]366 666.8888';
      4: format := '\2p[|-]366 666 666 666.88';
    end;

    if (Abs(value) >= 0.01)
      result := DoubleToStr(value, format);
  }
}

function IsBold(_row: byte): boolean;
{
  result := (_row = R09) or (_row = R16);
}

function PrintCell(_row, _col: byte): string;
{
  result := '';

  if IsBold(_row)
    result := '<strong>';

  case _col of

    1:    result += GetParamName(_row);
    2..4: result += PrintFormatted(_row, _col);
    5:    result += GetComment(_row);

  end;

  if IsBold(_row)
    result += '</strong>';
}

