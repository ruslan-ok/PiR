//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Экспорт-импорт в своём формате
//------------------------------------------------------------------------------

#include Base64.vih
#include AtlProtocol.vih

Interface Rok;

Const
  StartYear = 2009;
End;

var
  pStream: TPtr;
  oWage: IWageView;
  b64: Base64;
  s: string;
  bMessaged: boolean;

//---------------------------------------------------------------------------------
// Преобразование даты в Id и обратно

private function GetId(_table: word; _nrec: comp): byte;
{
  result := 0;
  if (oWage <> NullRef)
    result := oWage.GetId(_table, _nrec);
}

private function GetTitleId(_title: string): byte;
{
  result := 0;
  if (oWage <> NullRef)
    result := oWage.GetTitleId(_title);
}

//---------------------------------------------------------------------------------
// Посимвольное чтение и запись

private function MyRead(_len: byte): string;
{
  result := '';
  var i: byte = 0;
  var cc: char;
  while (i < _len)
  {
    File_Read(cc, pStream);
    if (cc = chr(10)) or (cc = chr(13))
      continue;
    i++;
    result += cc;
  }
}

private procedure MyWrite(_value: string);
{
  var i: byte;
  for (i := 1; i <= length(_value); i++)
  {
    File_Write(_value[i], pStream);
    if oWage.CheckLineLen
      File_WriteLn('', pStream);
  }
}

//---------------------------------------------------------------------------------
// Запись в файл

private procedure WriteByte(_value: byte);
{
  s := b64.EncodeByte(_value);
  MyWrite(s);
}

private procedure WriteWord(_value: word);
{
  s := b64.EncodeWord(_value);
  MyWrite(s);
}

private procedure WriteInt(_value: integer);
{
  s := b64.EncodeInt(_value);
  MyWrite(s);
}

private procedure WriteLong(_value: longint);
{
  s := b64.EncodeLong(_value);
  MyWrite(s);
}

private procedure WriteComp(_value: comp);
{
  s := b64.EncodeComp(_value);
  MyWrite(s);
}

private procedure WriteDouble(_value: double);
{
  s := b64.EncodeDouble(_value);
  MyWrite(s);
}

private procedure WriteDate(_value: date);
{
  s := b64.EncodeDate(_value);
  MyWrite(s);
}

private procedure WriteStr(_value: string);
{
  var part1, part2: string;
  b64.EncodeLongStr(_value, part1, part2);
  WriteByte(length(part1));
  MyWrite(part1);
  if (length(part1) >= 254)
  {
    WriteByte(length(part2));
    MyWrite(part2);
  }
}

//---------------------------------------------------------------------------------
// Чтение из файла

private function ReadByte: byte;
{
  s := MyRead(2);
  result := b64.DecodeByte(s);
}

private function ReadWord: word;
{
  s := MyRead(3);
  result := b64.DecodeWord(s);
}

private function ReadInt: integer;
{
  s := MyRead(3);
  result := b64.DecodeInt(s);
}

private function ReadLong: longint;
{
  s := MyRead(6);
  result := b64.DecodeLong(s);
}

private function ReadComp: comp;
{
  s := MyRead(12);
  result := b64.DecodeComp(s);
}

private function ReadDouble: double;
{
  s := MyRead(12);
  result := b64.DecodeDouble(s);
}

private function ReadDate: date;
{

  s := MyRead(6);
  result := b64.DecodeDate(s);
}

private function ReadStr: string;
{
  var pp: byte;
  pp := ReadByte;
  s := MyRead(pp);
  result := b64.DecodeStr(s);
  if (pp >= 254)
  {
    pp := ReadByte;
    s := MyRead(pp);
    result += b64.DecodeStr(s);
  }
}

//---------------------------------------------------------------------------------
//

private function CheckNewRec: boolean;
{
  var cc: string;
  cc := MyRead(1);
  result := (cc = '.');
  if (cc <> '.') and (cc <> '}') and not bMessaged
  {
    bMessaged := true;
    oWage.Log(APE_ERROR, 'Во входном потоке (строка ' + oWage.GetStrByPos + ', позиция ' + oWage.GetColByPos + ') не обнаружен ожидаемый символ начала записи или окончания списка.');
  }
}

private procedure StartNewRec;
{
  MyWrite('.');
}

private function PeriodToId(_period: date): byte;
{
  result := byte((Year(_period) - StartYear) * 12 + Month(_period) - 1);
}

private function IdToPeriod(_id: byte): date;
{
  var y: word;
  var m: byte;
  y := word(_id div 12) + StartYear;
  m := (_id mod 12) + 1;
  result := date(1, m, y);
}

public procedure Clear(_wage: IWageView = NullRef);
{
  oWage := _wage;
}

public procedure SetStream(_stream: TPtr; _passw: string = '');
{
  pStream := _stream;
  b64.SetPassword(_passw);
}

public function Load(_e: IDomNode = NullRef): boolean;
{
  result := false;

  if (pStream = 0) and (_e <> NullRef)
    result := LoadXml(_e);
  else
    if (pStream <> 0) and (_e = NullRef)
      result := LoadRok;
}

public function Save(_e: IDomNode = NullRef): IDomNode;
{
  result := NullRef;

  if (pStream = 0) and (_e <> NullRef)
    result := SaveXml(_e);
  else
    if (pStream <> 0) and (_e = NullRef)
      SaveRok;
}

public function LoadXml(_e: IDomNode): boolean;
{
  #__UnUsed__(_e)
  result := false;
  GetId(0, 0);
  GetTitleId('');
}

public function SaveXml(_e: IDomNode): IDomNode;
{
  #__UnUsed__(_e)
  result := NullRef;
}

public procedure Start;
{
  MyWrite('{');
}

public procedure Stop;
{
  MyWrite('}');
}

public function SaveRok: boolean;
{
  result := false;
  StartNewRec;
  WriteByte(0);
  WriteWord(0);
  WriteInt(0);
  WriteLong(0);
  WriteComp(0);
  WriteDouble(0);
  WriteDate(ZeroDate);
  WriteStr('');
  PeriodToId(IdToPeriod(0));
}

public function LoadRok: boolean;
{
  result := false;
  CheckNewRec;
  ReadByte;
  ReadWord;
  ReadInt;
  ReadLong;
  ReadComp;
  ReadDouble;
  ReadDate;
  ReadStr;
}


constructor Init;
{
  result := true;
  pStream := 0;
  oWage := NullRef;
  bMessaged := false;
}

End.
