//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Табличный объект подразделений
//------------------------------------------------------------------------------

Interface Depart;

// Подразделения
Table struct mtDepart
(
  Id:   byte,
  Code: s50,
  Name: s100
)
With index
(
  DepId  = Id (unique),
  ByCode = Code,
  ByName = Name
);

Create view from mtDepart, mtDepart mtDepart2;

property Id:   byte absolute mtDepart.Id;
property Code: s50  absolute mtDepart.Code;
property Name: s100 absolute mtDepart.Name;

index DepId  auto;
index ByCode auto;
index ByName auto;

public function GetName(_Id: byte): string;
{
  result := '';

  if (GetFirst mtDepart2 where (( _Id == mtDepart2.Id )) = tsOk)
    result := mtDepart2.Name;
}

function IModify.doInsert: word;
{
  result := insert current mtDepart;
}

function IModify.doUpdate: word;
{
  result := update current mtDepart;
}

function IModify.doDelete: word;
{
  result := delete current mtDepart;
}

implementation IModify.doFlush  abstract;

constructor Init;
{
  result := true;
  delete all mtDepart;
}

public procedure Clear(_wage: IWageView = NullRef);
{
  oWage := _wage;
  delete all mtDepart2;
}

public function LoadXml(_e: IDomNode): boolean;
{
  ClearBuffer(#mtDepart);
  if _e.GetFirstAttr
    do
    {
      case _e.FndAttr.Name of
        'rok:NRec': Id   := GetId(cgDepart, comp(_e.FndAttr.Value));
        'rok:Id':   Id   := GetId(cgDepart, comp(_e.FndAttr.Value));
        'rok:Code': Code := _e.FndAttr.Value;
        'rok:Name': Name := _e.FndAttr.Value;
      end;
    }
    while (_e.GetNextAttr);
  insert current mtDepart;
  result := true;
}

public function SaveXml(_e: IDomNode): IDomNode;
{
  var xnode: IDomNode
  xnode := _e.AddNode('rok:Depart');
  xnode.AddAttr('rok:Id='   + string(Id));
  xnode.AddAttr('rok:Code=' + Code);
  xnode.AddAttr('rok:Name=' + Name);
  result := xnode;
}

public function LoadRok: boolean;
{
  result := false;

  if CheckNewRec
  {
    ClearBuffer(#mtDepart);
    Id   := ReadByte;
    Code := ReadStr;
    Name := ReadStr;
    insert current mtDepart;
    result := true;
  }
}

public function SaveRok: boolean;
{
  result := true;
  StartNewRec;
  WriteByte(Id);
  WriteStr(Code);
  WriteStr(Name);
}

end.
