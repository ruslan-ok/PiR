//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Табличный объект отдельной выплаты
//------------------------------------------------------------------------------

#include AtlProtocol.vih

Interface Payment;

var mPrev: IPayment;

Table struct mtPayment
(
  Person:   byte,
  Period:   byte,
  Payed:    date,
  Sort:     byte,
  Title:    byte,
  Value:    double,
  Currency: byte,
  Rate:     double,
  Info:     string
)
With index
(
  Sorted = Person + Period + Sort,
  Titled = Person + Period + Title (unique),
  ByTitle = Title
);

private function GetCountedValue(_value, _rate: double; _PresentCurrency, _NeedCurrency: byte): double; forward;

Create view as select
  GetCountedValue(mtPayment.Value, mtPayment.Rate, mtPayment.Currency, cgUSD) (FieldName = fInUSD),
  GetCountedValue(mtPayment.Value, mtPayment.Rate, mtPayment.Currency, cgBYN) (FieldName = fInBYN),
  *
from
  mtPayment,
  mtPayment mtPayment2;

property Person:   byte   absolute mtPayment.Person;
property Period:   byte   absolute mtPayment.Period;
property Payed:    date   absolute mtPayment.Payed;
property Sort:     byte   absolute mtPayment.Sort;
property Title:    byte   absolute mtPayment.Title;
property Value:    double absolute mtPayment.Value;
property Currency: byte   absolute mtPayment.Currency;
property Rate:     double absolute mtPayment.Rate;
property Info:     string absolute mtPayment.Info;

property inBYN:    double read fInBYN;
property inUSD:    double read fInUSD;
property dPeriod:  date   read IdToPeriod(mtPayment.Period);

index Sorted auto;
index Titled auto;
index ByTitle auto;

var TagName: string;

public function GetValue(_pers: byte; _period: byte; _title: byte; _NeededCurrency: byte; _rate: double = 0): double;
{
  result := 0;

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := GetCountedValue(mtPayment2.Value, if(mtPayment2.Rate = 0, _rate, mtPayment2.Rate), mtPayment2.Currency, _NeededCurrency);
}

public function GetRate(_pers: byte; _period: byte; _title: byte): double;
{
  result := 0;

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := mtPayment2.Rate;
}

public function GetInfo(_pers: byte; _period: byte; _title: byte): string;
{
  result := '';

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := mtPayment2.Info;
}

public function GetPayed(_pers: byte; _period: byte; _title: byte): date;
{
  result := ZeroDate;

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := mtPayment2.Payed;
}

public function GetTitleName: string;
{
  result := '';
  if (oWage <> NullRef)
    result := oWage.GetTitleName(mtPayment.Title);
}

public function ToString: string;
{
  result := string(Value) + ' ' + if(Currency = cgUSD, 'USD', 'BYN') + ' ' + GetTitleName;
}

function IModify.doInsert : word;
{
  result := insert current mtPayment;
  oWage.DataChanged := true;
}

function IModify.doUpdate : word;
{
  result := update current mtPayment;
  oWage.DataChanged := true;
}

function IModify.doDelete : word;
{
  result := delete current mtPayment;
  oWage.DataChanged := true;
}

implementation IModify.doFlush abstract;

constructor Init;
{
  result := true;
  delete all mtPayment;
  TagName := 'rok:Payment';
}

private function GetCountedValue(_value, _rate: double; _PresentCurrency, _NeedCurrency: byte): double;
{
  result := 0;

  case _NeedCurrency of

    cgBYN:
      case _PresentCurrency of
        cgBYN: result := _value;
        cgUSD: result := _value * _rate;
      end;

    cgUSD:
      case _PresentCurrency of
        cgBYN: result := _value / _rate;
        cgUSD: result := _value;
      end;

  end;
}

public procedure Clear(_wage: IWageView = NullRef);
{
  oWage := _wage;
  delete all mtPayment;
}

public function SaveXml(_e: IDomNode): IDomNode;
{
  var xnode: IDomNode
  xnode := _e.AddNode(TagName);
  xnode.AddAttr('rok:Payed='  + string(Payed));
  xnode.AddAttr('rok:Sort='   + string(Sort));
  xnode.AddAttr('rok:Title='  + string(Title));
  xnode.AddAttr('rok:Value='  + DoubleToStr(Value, '\2p[|-]3666666666666~99'));
  xnode.AddAttr('rok:Currency=' + string(Currency));
  xnode.AddAttr('rok:Rate='   + DoubleToStr(Rate, '\4p[|-]3666666666~9999'));
  xnode.AddAttr('rok:Info='   + Info);
  result := xnode;
}

public function LoadXml(_e: IDomNode): boolean;
{
  result := false;

  if (_e.Name <> TagName)
    exit;

  ClearBuffer(#mtPayment);
  if _e.GetFirstAttr
    do
    {
      case _e.FndAttr.Name of
        'rok:Payed':    Payed    := StrToDate(_e.FndAttr.Value, 'DD/MM/YYYY');
        'rok:Sort':     Sort     := byte(_e.FndAttr.Value);
        'rok:Title':    Title    := GetTitleId(_e.FndAttr.Value);
        'rok:Value':    Value    := double(_e.FndAttr.Value);
        'rok:TaxCur':   Currency := byte(_e.FndAttr.Value); // deprecated
        'rok:Currency': Currency := byte(_e.FndAttr.Value);
        'rok:Rate':     Rate     := double(_e.FndAttr.Value);
        'rok:Info':     Info     := _e.FndAttr.Value;
      end;
    }
    while (_e.GetNextAttr);

  Person := oWage.PersonId;
  Period := oWage.PeriodId;

  if (GetFirst mtPayment2 where (( mtPayment.Person == mtPayment2.Person and
                                   mtPayment.Period == mtPayment2.Period and
                                   mtPayment.Title  == mtPayment2.Title )) = tsOk)
  {
    if (mtPayment.Payed <> mtPayment2.Payed) or (mtPayment.Value <> mtPayment2.Value) or (mtPayment.Currency <> mtPayment2.Currency) or (mtPayment.Rate <> mtPayment2.Rate) or (mtPayment.Info <> mtPayment2.Info)
      oWage.Log(APE_WARNING, 'Запись уже существует с другими значениями: ' + ToString + ' [' +
                             if(mtPayment.Payed = mtPayment2.Payed, '', ' дата выплаты ' + string(mtPayment.Payed) + ' в базе ' + string(mtPayment2.Payed)) +
                             if(mtPayment.Value = mtPayment2.Value, '', ' сумма ' + DoubleToStr(mtPayment.Value, '\4p[|-]3666666666~9999') + ' в базе ' + DoubleToStr(mtPayment.Value, '\4p[|-]3666666666~9999')) +
                             if(mtPayment.Currency = mtPayment2.Currency, '', ' валюта ' + string(mtPayment.Currency) + ' в базе ' + string(mtPayment2.Currency)) +
                             if(mtPayment.Rate = mtPayment2.Rate, '', ' курс ' + DoubleToStr(mtPayment.Rate, '\4p[|-]3666666666~9999') + ' в базе ' + DoubleToStr(mtPayment2.Rate, '\4p[|-]3666666666~9999')) +
                             if(mtPayment.Info = mtPayment2.Info, '', ' коммент "' + string(mtPayment.Info) + '" в базе "' + string(mtPayment2.Info) + '"') + ']');
  }
  else
  {
    var res: word;
    res := insert current mtPayment;
    if (res <> tsOk)
      oWage.Log(APE_ERROR, 'Error on insert: ' + ToString);
    else
      oWage.Log(APE_WARNING, ToString);
    oWage.DataChanged := true;
  }

  result := true;
}

public function SaveRok: boolean;
{
  result := true;
  StartNewRec;
  WriteDate(Payed);
  WriteByte(Sort);
  WriteByte(Title);
  WriteDouble(Value);
  WriteByte(Currency);
  WriteDouble(Rate);
  WriteStr(Info);
}

public function LoadRok: boolean;
{
  result := false;

  if CheckNewRec
  {
    ClearBuffer(#mtPayment);
    Payed    := ReadDate;
    Sort     := ReadByte;
    Title    := ReadByte;
    Value    := ReadDouble;
    Currency := ReadByte;
    Rate     := ReadDouble;
    Info     := ReadStr;
    Person := oWage.PersonId;
    Period := oWage.PeriodId;

    if (GetFirst mtPayment2 where (( mtPayment.Person == mtPayment2.Person and
                                     mtPayment.Period == mtPayment2.Period and
                                     mtPayment.Title  == mtPayment2.Title )) = tsOk)
    {
      if (mtPayment.Payed <> mtPayment2.Payed) or (mtPayment.Value <> mtPayment2.Value) or (mtPayment.Currency <> mtPayment2.Currency) or (mtPayment.Rate <> mtPayment2.Rate) or (mtPayment.Info <> mtPayment2.Info)
        oWage.Log(APE_WARNING, 'Запись уже существует: ' + ToString);
    }
    else
    {
      insert current mtPayment;
      oWage.Log(APE_INFO, ToString);
    }

    result := true;
  }
}

end.
