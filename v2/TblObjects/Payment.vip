//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Табличный объект отдельной выплаты
//------------------------------------------------------------------------------

Interface Payment;

var mPrev: IPayment;

Table struct mtPayment
(
  Person: s50,
  Period: date,
  Payed:  date,
  Sort:   word,
  Title:  s100,
  Value:  double,
  TaxCur: byte,
  Rate:   double,
  Info:   string
)
With index
(
  Sorted = Person + Period + Sort,
  Titled = Person + Period + Title
);

function GetCountedValue(_PresentTaxCur: byte; _value, _rate: double; _NeededTaxCur: byte): double; forward;
var sError: string = '';

Create view as select
  GetCountedValue(mtPayment.TaxCur, mtPayment.Value, mtPayment.Rate, cgNetUSD) (FieldName = fNetUSD),
  GetCountedValue(mtPayment.TaxCur, mtPayment.Value, mtPayment.Rate, cgTaxUSD) (FieldName = fTaxUSD),
  GetCountedValue(mtPayment.TaxCur, mtPayment.Value, mtPayment.Rate, cgNetBYN) (FieldName = fNetBYN),
  GetCountedValue(mtPayment.TaxCur, mtPayment.Value, mtPayment.Rate, cgTaxBYN) (FieldName = fTaxBYN),
  *
from
  mtPayment,
  mtPayment mtPayment2;

property Person: s50    absolute mtPayment.Person;
property Period: date   absolute mtPayment.Period;
property Payed:  date   absolute mtPayment.Payed;
property Sort:   word   absolute mtPayment.Sort;
property Title:  s100   absolute mtPayment.Title;
property Value:  double absolute mtPayment.Value;
property TaxCur: byte   absolute mtPayment.TaxCur;
property Rate:   double absolute mtPayment.Rate;
property Info:   string absolute mtPayment.Info;
property NetBYN: double read fNetBYN;
property TaxBYN: double read fTaxBYN;
property NetUSD: double read fNetUSD;
property TaxUSD: double read fTaxUSD;
property Error:  string read sError;

index Sorted auto;
index Titled auto;

var TagName: string;

public function GetValue(_pers: s50; _period: date; _title: s100; _NeededTaxCur: byte): double;
{
  result := 0;

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := GetCountedValue(mtPayment2.TaxCur, mtPayment2.Value, mtPayment2.Rate, _NeededTaxCur);
}

public function GetRate(_pers: s50; _period: date; _title: s100): double;
{
  result := 0;

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := mtPayment2.Rate;
}

public function GetInfo(_pers: s50; _period: date; _title: s100): string;
{
  result := '';

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := mtPayment2.Info;
}

public function GetPayed(_pers: s50; _period: date; _title: s100): date;
{
  result := ZeroDate;

  if (GetFirst mtPayment2 where (( _pers   == mtPayment2.Person and
                                   _period == mtPayment2.Period and
                                   _title  == mtPayment2.Title )) = tsOk)
    result := mtPayment2.Payed;
}

function IModify.doInsert : word;
{
  result := insert current mtPayment;
}

function IModify.doUpdate : word;
{
  result := update current mtPayment;
}

function IModify.doDelete : word;
{
  result := delete current mtPayment;
}

implementation IModify.doFlush abstract;

constructor Init;
{
  result := true;
  delete all mtPayment;
  TagName := 'rok:Payment';
}

private function GetCountedValue(_PresentTaxCur: byte; _value, _rate: double; _NeededTaxCur: byte): double;
{
  result := 0;

  case _NeededTaxCur of

    cgNetBYN:
      case _PresentTaxCur of
        cgNetBYN: result := _value;
        cgTaxBYN: result := _value * 1.09;
        cgNetUSD: result := _value * _rate;
        cgTaxUSD: result := _value * 1.09 * _rate;
      end;

    cgTaxBYN:
      case _PresentTaxCur of
        cgNetBYN: result := _value * 0.91;
        cgTaxBYN: result := _value;
        cgNetUSD: result := _value * 0.91 * _rate;
        cgTaxUSD: result := _value * _rate;
      end;

    cgNetUSD:
      case _PresentTaxCur of
        cgNetBYN: result := _value / _rate;
        cgTaxBYN: result := _value * 1.09 / _rate;
        cgNetUSD: result := _value;
        cgTaxUSD: result := _value * 1.09;
      end;

    cgTaxUSD:
      case _PresentTaxCur of
        cgNetBYN: result := _value * 0.91 / _rate;
        cgTaxBYN: result := _value / _rate;
        cgNetUSD: result := _value * 0.91;
        cgTaxUSD: result := _value;
      end;

  end;
}

public procedure Clear;
{
  delete all mtPayment;
}

public function Load(_e: IDomNode): boolean;
{
  result := false;

  if (_e.Name <> TagName)
    exit;

  ClearBuffer(#mtPayment);
  if _e.GetFirstAttr
    do
    {
      case _e.FndAttr.Name of
        'rok:Payed':  Payed  := StrToDate(_e.FndAttr.Value, 'DD/MM/YYYY');
        'rok:Sort':   Sort   := word(_e.FndAttr.Value);
        'rok:Title':  Title  := _e.FndAttr.Value;
        'rok:Value':  Value  := double(_e.FndAttr.Value);
        'rok:TaxCur': TaxCur := word(_e.FndAttr.Value);
        'rok:Rate':   Rate  := double(_e.FndAttr.Value);
        'rok:Info':   Info   := _e.FndAttr.Value;
      end;
    }
    while (_e.GetNextAttr);

  insert current mtPayment;
  result := true;
}

public function Save(_e: IDomNode): IDomNode;
{
  var xnode: IDomNode
  xnode := _e.AddNode(TagName);
  xnode.AddAttr('rok:Payed='  + string(Payed));
  xnode.AddAttr('rok:Sort='   + string(Sort));
  xnode.AddAttr('rok:Title='  + Title);
  xnode.AddAttr('rok:Value='  + DoubleToStr(Value, '\2p[|-]3666666666666~99'));
  xnode.AddAttr('rok:TaxCur=' + string(TaxCur));
  xnode.AddAttr('rok:Rate='   + DoubleToStr(Rate, '\4p[|-]3666666666~9999'));
  xnode.AddAttr('rok:Info='   + Info);
  result := xnode;
}

end.
