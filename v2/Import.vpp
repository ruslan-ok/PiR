//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Окно параметров импорта
//------------------------------------------------------------------------------

var sFile: string;
var wDetProt: word;

Window wnImport 'Параметры импорта';
  show at(,, 82, 8);

Screen scImport ('',, sci13Esc);
  table mtPeriods;
fields
  sFile ('xml-файл для импорта'): noProtect, pickButton;
  wDetProt ('Формирование подробного протокола',, sci1Esc): noProtect;
buttons
  cmOk, default;
  cmCancel;
<<

  `Файл для импорта`
   .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

   [.] подробный протокол`          <.  Загрузить  .>      <.   Отмена    .>
>>
End;

End;

private procedure DoImport; forward;

WindowEvent wnImport;

cmInit:
{
  sFile := '';
  ReadMyDsk(sFile, 'WageView_sFile', false);
  wDetProt := 0;
  ReadMyDsk(wDetProt, 'WageView_wDetProt', false);
}

cmPick:
  case CurField of
    #sFile:
    {
      sFile := GetFileName('*.xml;*.xlsx', 'Выбор xml- или xlsx-файла для импорта');
      RedrawPanel(#mtPeriods);
    }
  end;

cmOk:
{
  DoImport;
  SaveMyDsk(sFile, 'WageView_sFile');
  SaveMyDsk(wDetProt, 'WageView_wDetProt');
  CloseWindow(wnImport);
}

End;

#include ImportXml.vpp
#include ImportXlsx.vpp

var bFromXml: boolean;

// Проверки перед началом импорта
function StartCheckImport: boolean;
{
  result := false;

  if (sFile = '')
  {
    message('Не задан файл');
    exit;
  }

  if not ExistFile(sFile)
  {
    message('Указанный файл не найден');
    exit;
  }

  var sPath, sName, sExt: string;
  ParseFileName(sFile, sPath, sName, sExt);

  if (UpCase(sExt) <> 'XML') and (UpCase(sExt) <> 'XLSX')
  {
    message('Импорт возможен только из файлов с расширениями xml и xlsx.');
    exit;
  }

  bFromXml := (UpCase(sExt) = 'XML');

  if bFromXml and isValid(#mtStruct)
    if (message('Текущие данные будут удалены.'#13#13 +
                'Продолжить?', Confirmation + YesNo + mfSwapButtons) <> cmYes)
    {
      exit;
    }

  result := true;
}

private procedure DoImport;
{
  if (not StartCheckImport)
    exit;

  if bFromXml
  {
    DoImportXml;
    SaveMyDsk(sFile, 'WageView_sXmlFile');
  }
  else
  {
    DoImportXlsx;
    SaveMyDsk(sFile, 'WageView_sXlsxFile');
  }

  GetFirst mtPeriods;
  BuildTree;

  if isValid(#mtPeriods)
    SelectFormat(trFilling);
}

private procedure AutoImport;
{
  sFile := '';
  ReadMyDsk(sFile, 'WageView_sXmlFile', false);
  if ExistFile(sFile)
    DoImport;
}
