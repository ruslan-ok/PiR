//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Объектные интерфейсы
//------------------------------------------------------------------------------

ObjInterface IDomDoc; forward;

Const

  cgBYN = 1;
  cgBYR = 2;
  cgUSD = 3;

  cgDepart  = 1;
  cgDepHist = 2;
  cgPost    = 3;
End;


#doc
Обёртка для функций обработки XML-DOMDocument
#end
ObjInterface IDomNodeAttr;
  property Name: string read; // #docl Имя свойства
  property Value: string read; // #docl Значение свойства
end;

#doc
Обёртка для функций обработки XML-DOMDocument
#end
ObjInterface IDomNode;
  property doc: IDomDoc read write; // #docl Общий для всех узлов интерфейс документа
  property id: TPtr read write; // #docl Адрес указателя на XMLDOMNode

  property Name: string read; // #docl Имя узла
  property FndNode: IDomNode read; // #docl Очередной подчиненный узел (см. GetFirstNode/GetNextNode)
  property FndAttr: IDomNodeAttr read; // #docl Очередной подчиненный узел (см. GetFirstNode/GetNextNode)

  function AddNode(_name: string; _xmlns: string = ''): IDomNode; // #docl Добавляет новый узел к текущему узлу
  procedure AddAttr(_attr: string); // #docl Добавляет атрибут текущему узлу
  function AddTextNode(_name, _value: string): IDomNode; // #docl Добавляет к текущему узлу новый узел с текстовым содержимым
  function GetFirstNode: boolean; // #docl Позиционирование на первый подчиненный узел
  function GetNextNode: boolean; // #docl Позиционирование на следующий подчиненный узел
  function GetFirstAttr: boolean; // #docl Позиционирование на первый атрибут узла
  function GetNextAttr: boolean; // #docl Позиционирование на следующий атрибут узла
end;

#doc
Обёртка для функций обработки XML-DOMDocument
#end
ObjInterface IDomDoc(IDomNode);
  property RootNode: IDomNode read; // #docl Корневой узел документа
  property ns: string; // #docl Текущее пространство имен

  procedure CreateEmpty; // #docl Инициализация документа
  procedure CreateXmlDoc; // #docl Инициализация нового xml-документа с добавлением стандартной инструкции обработки
  function Load(_file: string): boolean; // #docl Загружает документ из файла
  function Save(_file: string): boolean; // #docl Сохраняет документ в файл
  procedure Free; // #docl Освобождение ссылок перед уничтожением документа
  procedure SetNS(_ns, _value: string);
end;



ObjInterface IWageView;
  property PersonId: byte read;
  property PeriodId: byte read;
  property DataChanged: boolean;
  function GetId(_table: word; _nrec: comp): byte;
  function GetTitleId(_title: string): byte;
  function GetTitleName(_title: byte): string;
  function CheckLineLen: boolean;
  procedure Log(_type: word; _mess: string);
  function GetStrByPos: string;
  function GetColByPos: string;

End;


private ObjInterface ISerializable;
  procedure Clear(_wage: IWageView = NullRef);
  procedure SetStream(_stream: TPtr);
  function Load(_e: IDomNode = NullRef): boolean;
  function Save(_e: IDomNode = NullRef): IDomNode;
  function LoadXml(_e: IDomNode): boolean;
  function SaveXml(_e: IDomNode): IDomNode;
  function LoadRok: boolean;
  function SaveRok: boolean;
  procedure Start;
  procedure Stop;
end;

ObjInterface IPeriod(ISerializable);
  property Id: byte;
  property dBeg: date;
  property PlanDays: byte;
  property AvansDate: date;
  property PaymentDate: date;
  property AvansRate: double;
  property PaymentRate: double;
  property DebtInRate: double;

  index ById = Id (unique);
  index ByDate = dBeg (desc);

  function Next: date;
  function Correct: boolean;
  function CanDelete: boolean;
end;

ObjInterface IDepart(ISerializable);
  property Id: byte;
  property Name: s100;
  property Sort: byte;

  index DepId  = Id (unique);
  index ByName = Name;
  index BySort = Sort;

  function GetName(_Id: byte): string;
end;

ObjInterface IDepHist(ISerializable);
  property Id:     byte; // Нужен для поиска пересекающихся записей
  property dBeg:   date;
  property dEnd:   date;
  property Node:   byte;
  property Sort:   s50;
  property Depart: byte;
  property UpDepart: string read;

  index DhId   = Id (unique);
  index ByNode = Node, dBeg;
  index ByDep  = Depart, dBeg;

  function FindOther(_Id, _Depart: byte; _dBeg, _dEnd: date): boolean;
  function ValidNode(_node: byte): boolean;
end;

ObjInterface IPost(ISerializable);
  property Id:   byte;
  property Name: s100;

  index PostId = Id (unique);
  index ByName = Name;
end;

ObjInterface IPerson(ISerializable);
  property Id:     byte;
  property Login:  s50;
  property FIO:    s100;
  property EMail:  s100;
  property Passw:  s50;
  property Sort:   byte;
  property Born:   date;
  property Info:   string;
  property Addr:   string;
  property Phone:  string;
  property Years:  word   read;
  property Age:    string read;

  index PersId  = Id (unique);
  index ByLogin = Login;
  index ByFIO   = FIO;
end;

ObjInterface IFioHist(ISerializable);
  property Person: byte;
  property dEnd:   date;
  property FIO:    string;
  property Info:   string;

  index ByPerson = Person, dEnd (unique);
end;

ObjInterface IChild(ISerializable);
  property Person: byte;
  property Born:   date;
  property Num:    byte;
  property Name:   string;
  property Info:   string;

  index ByPerson = Person, Born, Num (unique);
end;

ObjInterface IAppoint(ISerializable);
  property dBeg:   date;
  property dEnd:   date;
  property Depart: byte;
  property Person: byte;
  property Post:   byte;
  property Salary: double;
  property Currency: s10;
  property TabNum: s50;
  property TaxDed: double;
  property Info:   string;
  property CorrectPer: boolean read;

  index ByDepart = Depart, dBeg;
  index ByPerson = Person, dBeg (unique);
  index ByPeriod = dBeg;
  index ByPost   = Post;

  function prSalary(_per: date): double;
end;

ObjInterface IEducation(ISerializable);
  property Person:        byte;
  property dBeg:          date;
  property dEnd:          date;
  property Institution:   string;
  property Course:        string;
  property Specialty:     string;
  property Qualification: string;
  property Document:      string;
  property Number:        string;
  property City:          string;
  property DocDate:       date;
  property Info:          string;

  index ByPerson = Person, dBeg (unique);
end;

ObjInterface IPersPer(ISerializable);
  property Person:     byte;
  property Period:     byte;
  property FactDays:   byte;
  property DebtIn:     double;
  property DebtOut:    double;
  property SalaryRate: double;
  property Privilege:  double;

  property PrevOut: double read;
  property dBeg:    date   read;

  index ByPerson = Person, Period (unique);
  index ByPeriod = Period;

  function FactDaysPrev: byte;
end;

ObjInterface IPayTitle(ISerializable);
  property Id:   byte;
  property Name: s100;

  index ById = Id (unique);
  index ByName = Name;

  function GetId(_title: string): byte;
  function GetTitle(_title: byte): string;
end;

ObjInterface IPayment(ISerializable);
  property Person:   byte;
  property Period:   byte;
  property Payed:    date;
  property Sort:     byte;
  property Title:    byte;
  property Value:    double;
  property Currency: byte;
  property Rate:     double;
  property Info:     string;
  property InBYN:    double read;
  property InUSD:    double read;
  property dPeriod:  date   read;

  index Sorted = Person, Period, Sort;
  index Titled = Person, Period, Title (unique);
  index ByTitle = Title;

  function GetValue(_pers, _period, _title: byte; _NeededCurrency: byte; _rate: double = 0): double;
  function GetRate(_pers,  _period, _title: byte): double;
  function GetInfo(_pers,  _period, _title: byte): string;
  function GetPayed(_pers, _period, _title: byte): date;
  function GetTitleName: string;
  function ToString: string;
end;






VipInterface DomNode
  implements
    IDomNode,
    IDomNodeAttr
  licensed(free);
public:
  constructor Init;
  destructor Done;
end;

VipInterface DomDoc(DomNode)
  implements IDomDoc
  licensed(free);
public:
  constructor Init;
  destructor Done;
end;

#include IModify.vih

VipInterface Rok
  implements ISerializable
  licensed(free);
public:
  constructor Init;
end;

VipInterface Period(Rok)
  implements IModify, IPeriod
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface DepHist(Rok)
  implements IModify, IDepHist
  licensed(free);
public:
  constructor Init;
  constructor Init2(_dep: IDepart);
  destructor Done;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Depart(Rok)
  implements IModify, IDepart
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Post(Rok)
  implements IModify, IPost
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Person(Rok)
  implements IModify, IPerson
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface FioHist(Rok)
  implements IModify, IFioHist
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Child(Rok)
  implements IModify, IChild
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Appoint(Rok)
  implements IModify, IAppoint
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Education(Rok)
  implements IModify, IEducation
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface PersPer(Rok)
  implements IModify, IPersPer
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface PayTitle(Rok)
  implements IModify, IPayTitle
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Payment(Rok)
  implements IModify, IPayment
  licensed(free);
public:
  constructor Init;
  procedure ISerializable.Clear(_wage: IWageView = NullRef);
  function ISerializable.LoadXml(_e: IDomNode): boolean;
  function ISerializable.SaveXml(_e: IDomNode): IDomNode;
  function ISerializable.LoadRok: boolean;
  function ISerializable.SaveRok: boolean;
end;

VipInterface Nachisl(Payment)
  licensed(free);
public:
  constructor Init;
end;


VipInterface WageView
  implements IWageView
  licensed(free);
