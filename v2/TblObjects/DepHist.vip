//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Табличный объект истории подразделений
//------------------------------------------------------------------------------

#include AtlProtocol.vih

Interface DepHist;

// Структура подразделений на дату
Table struct mtDepHist
(
  Id:     byte,
  dBeg:   date,
  dEnd:   date,
  Node:   byte,
  Sort:   s50,
  Depart: byte
)
With index
(
  DhId   = Id (unique),
  ByNode = Node + dBeg,
  ByDep  = Depart + dBeg
);


Create view from mtDepHist, mtDepHist mtDepHist2;

var pDepart: IDepart;

property Id:     byte absolute mtDepHist.Id;
property dBeg:   date absolute mtDepHist.dBeg;
property dEnd:   date absolute mtDepHist.dEnd;
property Node:   byte absolute mtDepHist.Node;
property Sort:   s50  absolute mtDepHist.Sort;
property Depart: byte absolute mtDepHist.Depart;
property UpDepart: string read if(pDepart = NullRef, '', pDepart.GetName(mtDepHist.Node));

index DhId   auto;
index ByNode auto;
index ByDep  auto;

private function isHitPeriod(dateBeg, dateEnd, dateTest: date): boolean;
{ // проверяет попадает ли dateTest в период
  result := true;

  if (dateTest = ZeroDate)
    exit;

  if ((dateBeg = ZeroDate) and (dateEnd = ZeroDate))
    exit;

  if ((dateTest >= dateBeg) and (dateEnd = ZeroDate))
    exit;

  if ((dateTest <= dateEnd) and (dateBeg = ZeroDate))
    exit;

  if ((dateEnd <> ZeroDate) and (dateTest <= dateEnd) and (dateBeg <> ZeroDate) and (dateTest >= dateBeg))
    exit;

  result := false;
}

private function isCrossPeriod(dateBeg1, dateEnd1, dateBeg2, dateEnd2: date): boolean;
{ // проверяет на пересечение периодов
  result := true;

  if ((dateBeg1 = ZeroDate) and (dateEnd1 = ZeroDate) and (dateBeg2 = ZeroDate) and (dateEnd2 = ZeroDate))
    exit;

  if ((dateBeg2 <> ZeroDate) and isHitPeriod(dateBeg1, dateEnd1, dateBeg2))
    exit;

  if ((dateEnd2 <> ZeroDate) and isHitPeriod(dateBeg1, dateEnd1, dateEnd2))
    exit;

  if ((dateBeg1 <> ZeroDate) and isHitPeriod(dateBeg2, dateEnd2, dateBeg1))
    exit;

  if ((dateEnd1 <>  ZeroDate) and isHitPeriod(dateBeg2, dateEnd2, dateEnd1))
    exit;

  result := false;
}

public function FindOther(_Id, _Depart: byte; _dBeg, _dEnd: date): boolean;
{
  result := false;

  if (GetFirst mtDepHist2 where (( _Depart == mtDepHist2.Depart and
                                   ((mtDepHist2.Id <> _Id) and isCrossPeriod(_dBeg, _dEnd, mtDepHist2.dBeg, mtDepHist2.dEnd)) )) = tsOk)
    result := true;
}

private function FindChild(_dep: byte): boolean;
{
  result := false;

  PushPos(#mtDepHist2);

  _loop mtDepHist2 where (( mtDepHist.Depart == mtDepHist2.Node ))
  {
    if not isCrossPeriod(mtDepHist.dBeg, mtDepHist.dEnd, mtDepHist2.dBeg, mtDepHist2.dEnd)
      continue;

    if (mtDepHist2.Depart = _dep)
    {
      result := true;
      break;
    }

    result := FindChild(mtDepHist2.Depart);
  }

  PopPos(#mtDepHist2);
}

public function ValidNode(_node: byte): boolean;
{
  if (_node = 0)
  {
    result := true;
    exit;
  }

  if (_node = mtDepHist.Depart)
  {
    result := false;
    message('В качестве вышестоящего не может быть это же подразделение');
    exit;
  }

  if FindChild(_node)
  {
    result := false;
    message('Выбранное подразделение уже присутствует среди подчиненных текущему');
    exit;
  }

  result := true;
}

//private function GenerateNewId: byte;
//{
//  result := 1;
//
//  if (GetLast mtDepHist2 ordered by index DhId = tsOk)
//    result := mtDepHist2.Id + 1;
//}

function IModify.doInsert: word;
{
//  mtDepHist.Id := GenerateNewId;

  result := insert current mtDepHist;
  oWage.DataChanged := (result = tsOk);
}

function IModify.doUpdate: word;
{
  result := update current mtDepHist;
  oWage.DataChanged := true;
}

function IModify.doDelete: word;
{
  result := delete current mtDepHist;
  oWage.DataChanged := true;
}

implementation IModify.doFlush abstract;

constructor Init;
{
  result := true;
  pDepart := NullRef;
  delete all mtDepHist;
}

constructor Init2(_dep: IDepart);
{
  result := Init;
  pDepart := _dep;
}

destructor Done;
{
  pDepart := NullRef;
}

public procedure Clear(_wage: IWageView = NullRef);
{
  oWage := _wage;
  delete all mtDepHist;
}

public function SaveXml(_e: IDomNode): IDomNode;
{
  var xnode: IDomNode
  xnode := _e.AddNode('rok:DepHist');
  xnode.AddAttr('rok:Id='     + string(Id));
  xnode.AddAttr('rok:dBeg='   + string(dBeg));
  xnode.AddAttr('rok:dEnd='   + string(dEnd));
  xnode.AddAttr('rok:Node='   + string(Node));
  xnode.AddAttr('rok:Sort='   + Sort);
  xnode.AddAttr('rok:Depart=' + string(Depart));
  result := xnode;
}

public function LoadXml(_e: IDomNode): boolean;
{
  ClearBuffer(#mtDepHist);
  if _e.GetFirstAttr
    do
    {
      case _e.FndAttr.Name of
        'rok:NRec':   Id     := GetId(cgDepHist, comp(_e.FndAttr.Value));
        'rok:Id':     Id     := GetId(cgDepHist, comp(_e.FndAttr.Value));
        'rok:dBeg':   dBeg   := StrToDate(_e.FndAttr.Value, 'DD/MM/YYYY');
        'rok:dEnd':   dEnd   := StrToDate(_e.FndAttr.Value, 'DD/MM/YYYY');
        'rok:Node':   Node   := GetId(cgDepart, comp(_e.FndAttr.Value));
        'rok:Sort':   Sort   := _e.FndAttr.Value;
        'rok:Depart': Depart := GetId(cgDepart, comp(_e.FndAttr.Value));
      end;
    }
    while (_e.GetNextAttr);

  if (GetFirst mtDepHist2 where (( mtDepHist.Id == mtDepHist2.Id )) <> tsOk)
  {
    insert current mtDepHist;
    oWage.Log(APE_WARNING, string(mtDepHist.Depart) + ' ' + string(mtDepHist.dBeg) + if(mtDepHist.dEnd = ZeroDate, '', '-' + string(mtDepHist.dEnd)));
    oWage.DataChanged := true;
  }
  result := true;
}

public function SaveRok: boolean;
{
  result := true;
  StartNewRec;
  WriteByte(Id);
  WriteDate(dBeg);
  WriteDate(dEnd);
  WriteByte(Node);
  WriteStr(Sort);
  WriteByte(Depart);
}

public function LoadRok: boolean;
{
  result := false;

  if CheckNewRec
  {
    ClearBuffer(#mtDepHist);
    Id     := ReadByte;
    dBeg   := ReadDate;
    dEnd   := ReadDate;
    Node   := ReadByte;
    Sort   := ReadStr;
    Depart := ReadByte;
    if (GetFirst mtDepHist2 where (( mtDepHist.Id == mtDepHist2.Id )) <> tsOk)
    {
      insert current mtDepHist;
      oWage.Log(APE_INFO, string(mtDepHist.Depart) + ' ' + string(mtDepHist.dBeg) + if(mtDepHist.dEnd = ZeroDate, '', '-' + string(mtDepHist.dEnd)));
    }
    result := true;
  }
}

end.
