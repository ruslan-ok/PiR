//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Реализация кодера Base64
//------------------------------------------------------------------------------

#include Base64.vih

function MoveDoubleToComp(double): comp; external 'G_Zarpl.dll';
function MoveCompToDouble(comp): double; external 'G_Zarpl.dll';

Interface Base64;

Const
  EncodingTable64: string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
End;

var i, cc, step, ndx: byte;
var j: word;
var a: array[1..255] of byte;

private function EncodeBytes(_qnt: byte): string; forward;
private procedure EncodeManyBytes(_qnt: byte; var _part1: string; var _part2: string); forward;
private function CheckDataLength(_data: string; _len: byte): boolean; forward;
private procedure DecodeBytes(_part1: string; _part2: string = ''); forward;

//---------------------------------------------------------------------------------
// Кодирование

public function EncodeByte(_data: byte): string;
{
  a[1] := _data;
  result := EncodeBytes(1);
}

public function EncodeWord(_data: word): string;
{
  a[1] := byte((_data shr 8) and 0FFh);
  a[2] := byte(_data and 0FFh);
  result := EncodeBytes(2);
}

public function EncodeInt(_data: integer): string;
{
  a[1] := byte((_data shr 8) and 0FFh);
  a[2] := byte(_data and 0FFh);
  result := EncodeBytes(2);
}

public function EncodeLong(_data: longint): string;
{
  a[1] := byte((_data shr 24) and 0FFh);
  a[2] := byte((_data shr 16) and 0FFh);
  a[3] := byte((_data shr 8) and 0FFh);
  a[4] := byte(_data and 0FFh);
  result := EncodeBytes(4);
}

public function EncodeComp(_data: comp): string;
{
  a[1] := byte((_data shr 56) and 0FFh);
  a[2] := byte((_data shr 48) and 0FFh);
  a[3] := byte((_data shr 40) and 0FFh);
  a[4] := byte((_data shr 32) and 0FFh);
  a[5] := byte((_data shr 24) and 0FFh);
  a[6] := byte((_data shr 16) and 0FFh);
  a[7] := byte((_data shr 8) and 0FFh);
  a[8] := byte(_data and 0FFh);
  result := EncodeBytes(8);
}

public function EncodeDouble(_data: double): string;
{
  var tmp: comp;
  tmp := MoveDoubleToComp(_data);
  result := EncodeComp(tmp);
}

public function EncodeDate(_data: date): string;
{
  a[1] := Day(_data);
  a[2] := Month(_data);
  a[3] := byte((Year(_data) shr 8) and 0FFh);
  a[4] := byte(Year(_data) and 0FFh);
  result := EncodeBytes(4);
}

public function EncodeStr(_data: string): string; // Для строк длиной не более 191 символа
{
  for (i := 1; i <= length(_data); i++)
    a[i] := ord(_data[i]);
  result := EncodeBytes(length(_data));
}

public procedure EncodeLongStr(_data: string; var _part1: string; var _part2: string); // Для строк длиной от 192 до 255 символов
{
  for (i := 1; i <= length(_data); i++)
    a[i] := ord(_data[i]);
  EncodeManyBytes(length(_data), _part1, _part2);
}

//---------------------------------------------------------------------------------
// Декодирование

public function DecodeByte(_data: string): byte;
{
  result := 0;

  if CheckDataLength(_data, 2)
  {
    DecodeBytes(_data);
    result := a[1];
  }
}

public function DecodeWord(_data: string): word;
{
  result := 0;

  if CheckDataLength(_data, 3)
  {
    DecodeBytes(_data);
    result := word(((word(a[1]) shl 8) and 0FF00h) or
                   ( word(a[2])        and 000FFh));
  }
}

public function DecodeInt(_data: string): integer;
{
  result := 0;

  if CheckDataLength(_data, 3)
  {
    DecodeBytes(_data);
    result := integer(((word(a[1]) shl 8) and 0FF00h) or
                      ( word(a[2])        and 000FFh));
  }
}

public function DecodeLong(_data: string): longint;
{
  result := 0;

  if CheckDataLength(_data, 6)
  {
    DecodeBytes(_data);
    var p1, p2, p3, p4: longint;
    p1 := a[1] shl 24;
    p2 := a[2] shl 16;
    p3 := a[3] shl 8;
    p4 := a[4];
    result := p1 + p2 + p3 + p4;
  }
}

public function DecodeComp(_data: string): comp;
{
  result := 0;

  if CheckDataLength(_data, 12)
  {
    DecodeBytes(_data);

    var b: boolean = false;

    if ((a[1] and 080h) <> 0)
    { // При сдвиге старший разряд теряется
      b := true;
      a[1] := a[1] - 080h;
    }

    result := ((comp(a[1]) shl 56) and 0FF00000000000000h) or
              ((comp(a[2]) shl 48) and 000FF000000000000h) or
              ((comp(a[3]) shl 40) and 00000FF0000000000h) or
              ((comp(a[4]) shl 32) and 0000000FF00000000h) or
              ((comp(a[5]) shl 24) and 000000000FF000000h) or
              ((comp(a[6]) shl 16) and 00000000000FF0000h) or
              ((comp(a[7]) shl 8)  and 0000000000000FF00h) or
              ( comp(a[8])         and 000000000000000FFh);
    if b
      result := result or 8000000000000000h;
  }
}

public function DecodeDouble(_data: string): double;
{
  var tmp: comp;
  tmp := DecodeComp(_data);
  result := MoveCompToDouble(tmp);
}

public function DecodeDate(_data: string): date;
{
  result := ZeroDate;

  if CheckDataLength(_data, 6)
  {
    DecodeBytes(_data);
    var y: word;
    y := word(((word(a[3]) shl 8) and 0FF00h) or
              ( word(a[4])        and 000FFh));
    result := date(a[1], a[2], y);
  }
}

public function DecodeStr(_data: string): string; // Для строк длиной не более 191 символа
{
  result := '';
  DecodeBytes(_data);
  for (j := 1; j < i; j++)
    result += chr(a[j]);
}

public function DecodeLongStr(_part1, _part2: string): string; // Для строк длиной от 192 до 255 символов
{
  result := '';
  DecodeBytes(_part1, _part2);
  for (j := 1; j < i; j++)
    result += chr(a[j]);
}

//---------------------------------------------------------------------------------
// Реализация

// Кодирование очередного байта
private procedure DoStep(var _res: string);
{
  case step of

    0:
    {
      ndx := ((cc shr 2) and 3Fh);
      _res += EncodingTable64[ndx+1];
      ndx := ((cc shl 4) and 30h);
      step := 1;
    }

    1:
    {
      ndx := ndx or ((cc shr 4) and 0Fh);
      _res += EncodingTable64[ndx+1];
      ndx := ((cc shl 2) and 3Ch);
      step := 2;
    }

    2:
    {
      ndx := ndx or ((cc shr 6) and 03h);
      _res += EncodingTable64[ndx+1];
      ndx := (cc and 3Fh);
      _res += EncodingTable64[ndx+1];
      step := 0;
    }

  end;
}

// Кодирование заданного количества байтов буфера для случая, когда результат заведомо поместится в строку
private function EncodeBytes(_qnt: byte): string;
{
  result := '';
  step := 0;

  for (i := 1; i <= _qnt; i++)
  {
    cc := a[i];
    DoStep(result);
  }

  if (step <> 0)
  {
    cc := 0;
    DoStep(result);
  }
}

// Кодирование заданного количества байтов буфера для случая, когда результат может не поместиться в одну строку
private procedure EncodeManyBytes(_qnt: byte; var _part1: string; var _part2: string);
{
  _part1 := _part2 := '';
  var str: string = '';
  step := 0;

  for (i := 1; i <= _qnt; i++)
  {
    cc := a[i];
    DoStep(str);
    if (length(str) >= 254)
    {
      _part1 := str;
      str := '';
    }
  }

  if (step <> 0)
  {
    cc := 0;
    DoStep(str);
  }

  if (length(_part1) >= 254)
    _part2 := str;
  else
    _part1 := str;
}

private function CheckDataLength(_data: string; _len: byte): boolean;
{
  if (length(_data) = _len)
    result := true;
  else
  {
    message('Base64: на вход декодера подана строка неверной длины.'#13 +
            'Ожидалось ' + string(_len) + ' символов, а получено ' + string(length(_data)));
    result := false;
  }
}

// Индекс заданного символа в словаре кода
private function GetPos64(_value: char): byte;
{
  result := 0;
  var k: byte;
  for (k := 1; k <= length(EncodingTable64); k++)
  {
    if (EncodingTable64[k] = _value)
    {
      result := k-1;
      exit;
    }
  }
  message('Base64: недопустимый символ во входном потоке.');
}

// Декодирование заданного количества символов кода
private procedure DecodeBytes(_part1: string; _part2: string = '');
{
  step := 0;
  i := 1;

  for (j := 1; j <= (length(_part1) + length(_part2)); j++)
  {
    cc := GetPos64(if(j <= 255, _part1[j], _part2[j-255]));

    case step of

      0:
      {
        ndx := ((cc shl 2) and 0FCh);
        step := 1;
      }

      1:
      {
        ndx := ndx or ((cc shr 4) and 03h);
        a[i++] := ndx;
        ndx := ((cc shl 4) and 0F0h);
        step := 2;
      }

      2:
      {
        ndx := ndx or ((cc shr 2) and 0Fh);
        a[i++] := ndx;
        ndx := ((cc shl 6) and 0C0h);
        step := 3;
      }

      3:
      {
        ndx := ndx or (cc and 3Fh);
        a[i++] := ndx;
        step := 0;
      }

    end;
  }
}




/*
public function cEncode(_data: comp): string;
{
  result := '';
  step := 0;

  for (i := 1; i <= length(_data); i++)
  {
    cc := ord(_data[i]);
    DoStep(result);
  }

  if (step <> 0)
  {
    cc := 0;
    DoStep(result);
  }
}

public function sEncode(_data: string): string;
{
  result := '';
  step := 0;

  for (i := 1; i <= length(_data); i++)
  {
    cc := ord(_data[i]);
    DoStep(result);
  }

  if (step <> 0)
  {
    cc := 0;
    DoStep(result);
  }
}








public function sDecode(_data: string): string;
{
  result := '';
  step := 0;

  for (i := 1; i <= length(_data); i++)
  {
    cc := GetPos64(_data[i]);

    case step of

      0:
      {
        ndx := ((cc shl 2) and 0FCh);
        step := 1;
      }

      1:
      {
        ndx := ndx or ((cc shr 4) and 03h);
        result += chr(ndx);
        ndx := ((cc shl 4) and 0F0h);
        step := 2;
      }

      2:
      {
        ndx := ndx or ((cc shr 2) and 0Fh);
        result += chr(ndx);
        ndx := ((cc shl 6) and 0C0h);
        step := 3;
      }

      3:
      {
        ndx := ndx or (cc and 3Fh);
        result += chr(ndx);
        step := 0;
      }

    end;
  }
}
*/
End.
