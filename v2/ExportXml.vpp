//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Экспорт в xml
//------------------------------------------------------------------------------

private procedure DoExportXml;
{
  _try
  {
    var doc: DomDoc new;
    doc.CreateXmlDoc;
    var xwage, xnode, xpers, xper: IDomNode;
    xwage := doc.AddNode('rok:Wage');
    xwage.AddAttr('xmlns:rok=http://178.172.132.68/pir/');

      xnode := xwage.AddNode('rok:Periods');
        _loop backward mtPeriods
        {
          if not NextVisual
            _raise exUserBreaked;

          mtPeriods.Save(xnode);
        }

      xnode := xwage.AddNode('rok:Departs');

        ResetBounds(#mtDepart);
        _loop mtDepart
        {
          if not NextVisual
            _raise exUserBreaked;

          mtDepart.Save(xnode);
        }
        SetBounds(#mtDepart);

        _loop mtDepHist
        {
          if not NextVisual
            _raise exUserBreaked;

          mtDepHist.Save(xnode);
        }

        ResetBounds(#mtPost);
        _loop mtPost
        {
          if not NextVisual
            _raise exUserBreaked;

          mtPost.Save(xnode);
        }
        SetBounds(#mtPost);

      xnode := xwage.AddNode('rok:Persons');
        _loop mtPerson
        {
          if not NextVisual
            _raise exUserBreaked;

          SetVisualHeader(mtPerson.FIO);
          xpers := mtPerson.Save(xnode);

          _loop mtAppoint where (( mtPerson.Login == mtAppoint.Person ))
            mtAppoint.Save(xpers);

          _loop mtPersPer where (( mtPerson.Login == mtPersPer.Person ))
          {
            if not NextVisual
              _raise exUserBreaked;

            SetVisualHeader(DateToStr(mtPersPer.Period, 'MM.YYYY') + ' ' + mtPerson.FIO);
            xper := mtPersPer.Save(xpers);

            if (GetFirst mtDebtIn where (( mtPersPer.Person == mtDebtIn.Person and
                                           mtPersPer.Period == mtDebtIn.Period /*and
                                           cgSum_DebtIn     == mtDebtIn.Mode*/ )) = tsOk)
              mtDebtIn.Save(xper);

            _loop mtNachisl where (( mtPersPer.Person == mtNachisl.Person and
                                     mtPersPer.Period == mtNachisl.Period /*and
                                     cgSum_Nachisl    == mtNachisl.Mode*/ ))
              mtNachisl.Save(xper);

            _loop mtPayment where (( mtPersPer.Person == mtPayment.Person and
                                     mtPersPer.Period == mtPayment.Period /*and
                                     cgSum_Payment    == mtPayment.Mode*/ ))
              mtPayment.Save(xper);

            if (GetFirst mtDebtOut where (( mtPersPer.Person == mtDebtOut.Person and
                                            mtPersPer.Period == mtDebtOut.Period /*and
                                            cgSum_DebtOut    == mtDebtOut.Mode*/ )) = tsOk)
              mtDebtOut.Save(xper);
          }
        }

    doc.Save(sXmlFile);
    doc.Free;
  }
  _except
    on exUserBreaked:
    {
    }
  _finally
  {
    StopVisual;
    Archivate;
    SaveMyDsk(sResFile, 'WageView_sResFile');
    SaveMyDsk(wToArchive, 'WageView_wToArchive');
    if (CurFormatInArea(scInfo) = scInfo)
      PushConditionForLeave(tcCurAppoint, tnmtAppoint);
    PopPos(#mtPeriods);
  }
}

