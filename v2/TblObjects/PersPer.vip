//------------------------------------------------------------------------------
//                                                      (c) Корпорация Галактика
// Заработная плата по отделу
// Табличный объект зарплат сотрудников по месяцам
//------------------------------------------------------------------------------

#include AtlProtocol.vih

Interface PersPer;

Table struct mtPersPer
(
  Person:   byte,
  Period:   byte,
  FactDays: byte,
  DebtIn:   double,
  DebtOut:  double
)
With index
(
  ByPerson = Person + Period (unique),
  ByPeriod = Period
);

Create view from mtPersPer, mtPersPer mtPersPer2;

private function GetPrevOut: double; forward;

property Person:   byte   absolute mtPersPer.Person;
property Period:   byte   absolute mtPersPer.Period;
property FactDays: byte   absolute mtPersPer.FactDays;
property DebtIn:   double absolute mtPersPer.DebtIn;
property DebtOut:  double absolute mtPersPer.DebtOut;
property PrevOut:  double read GetPrevOut;
property dBeg:     date   read IdToPeriod(mtPersPer.Period);


index ByPerson auto;
index ByPeriod auto;

public function FactDaysPrev: byte;
{
  result := mtPersPer.FactDays;

  if (GetLast mtPersPer2 where (( mtPersPer.Person == mtPersPer2.Person and
                                  mtPersPer.Period >> mtPersPer2.Period )) = tsOk)
    result := mtPersPer2.FactDays;
}

private function GetPrevOut: double;
{
  result := 0;

  if (GetFirst mtPersPer2 where (( mtPersPer.Person    == mtPersPer2.Person and
                              byte(mtPersPer.Period-1) == mtPersPer2.Period )) = tsOk)
    result := mtPersPer2.DebtOut;
}

function IModify.doInsert: word;
{
  result := insert current mtPersPer;
  oWage.DataChanged := true;
}

function IModify.doUpdate: word;
{
  result := update current mtPersPer;
  oWage.DataChanged := true;
}

function IModify.doDelete: word;
{
  result := delete current mtPersPer;
  oWage.DataChanged := true;
}

implementation IModify.doFlush abstract;

constructor Init;
{
  result := true;
  delete all mtPersPer;
}

public procedure Clear(_wage: IWageView = NullRef);
{
  oWage := _wage;
  delete all mtPersPer;
}

public function SaveXml(_e: IDomNode): IDomNode;
{
  var xnode: IDomNode
  xnode := _e.AddNode('rok:PersPer');
  xnode.AddAttr('rok:Period='   + string(Period));
  xnode.AddAttr('rok:FactDays=' + string(FactDays));
  xnode.AddAttr('rok:DebtIn=' + string(DebtIn));
  xnode.AddAttr('rok:DebtOut=' + string(DebtOut));
  result := xnode;
}

public function LoadXml(_e: IDomNode): boolean;
{
  var dTmp: date = ZeroDate;
  ClearBuffer(#mtPersPer);
  if _e.GetFirstAttr
    do
    {
      case _e.FndAttr.Name of
        'rok:Period':
        {
          dTmp := StrToDate(_e.FndAttr.Value, 'DD/MM/YYYY');
          Period := PeriodToId(dTmp);
        }
        'rok:FactDays': FactDays := byte(_e.FndAttr.Value);
        'rok:DebtIn': DebtIn := double(_e.FndAttr.Value);
        'rok:DebtOut': DebtOut := double(_e.FndAttr.Value);
      end;
    }
    while (_e.GetNextAttr);

  Person := oWage.PersonId;

  if (GetFirst mtPersPer2 where (( mtPersPer.Person == mtPersPer2.Person and
                                   mtPersPer.Period == mtPersPer2.Period )) <> tsOk)
  {
    insert current mtPersPer;
//    if (mtPersPer.DebtIn <> 0) or (mtPersPer.DebtOut <> 0)
//      oWage.Log(APE_INFO, string(dTmp) + ': DebtIn = ' + string(mtPersPer.DebtIn) + ', DebtOut = ' + string(mtPersPer.DebtOut));
  }
  result := true;
}

public function SaveRok: boolean;
{
  result := true;
  StartNewRec;
  WriteByte(Period);
  WriteByte(FactDays);
  WriteDouble(DebtIn);
  WriteDouble(DebtOut);
}

public function LoadRok: boolean;
{
  result := false;

  if CheckNewRec
  {
    ClearBuffer(#mtPersPer);
    Period   := ReadByte;
    FactDays := ReadByte;
    DebtIn   := ReadDouble;
    DebtOut  := ReadDouble;
    Person   := oWage.PersonId;

    if (GetFirst mtPersPer2 where (( mtPersPer.Person == mtPersPer2.Person and
                                     mtPersPer.Period == mtPersPer2.Period )) <> tsOk)
    {
      insert current mtPersPer;
//      if (mtPersPer.DebtIn <> 0) or (mtPersPer.DebtOut <> 0)
//        oWage.Log(APE_INFO, 'DebtIn = ' + string(mtPersPer.DebtIn) + ', DebtOut = ' + string(mtPersPer.DebtOut));
    }

    result := true;
  }
}

end.
